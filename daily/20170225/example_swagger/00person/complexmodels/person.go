package complexmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Person person
// swagger:model person
type Person struct {

	// age
	Age int64 `json:"age,omitempty"`

	// father
	Father *Person `json:"father,omitempty"`

	// mother
	Mother *Person `json:"mother,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// name2
	Name2 *string `json:"name2,omitempty"`

	// name3
	// Required: true
	Name3 *string `json:"name3"`

	// name4
	// Required: true
	Name4 *string `json:"name4"`

	// name5
	Name5 string `json:"name5,omitempty"`

	// name6
	// Required: true
	Name6 *string `json:"name6"`

	// statuses
	Statuses []interface{} `json:"statuses"`
}

// Validate validates this person
func (m *Person) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFather(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMother(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName3(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName4(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName6(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatuses(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Person) validateFather(formats strfmt.Registry) error {

	if swag.IsZero(m.Father) { // not required
		return nil
	}

	if m.Father != nil {

		if err := m.Father.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("father")
			}
			return err
		}
	}

	return nil
}

func (m *Person) validateMother(formats strfmt.Registry) error {

	if swag.IsZero(m.Mother) { // not required
		return nil
	}

	if m.Mother != nil {

		if err := m.Mother.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mother")
			}
			return err
		}
	}

	return nil
}

func (m *Person) validateName3(formats strfmt.Registry) error {

	if err := validate.Required("name3", "body", m.Name3); err != nil {
		return err
	}

	return nil
}

func (m *Person) validateName4(formats strfmt.Registry) error {

	if err := validate.Required("name4", "body", m.Name4); err != nil {
		return err
	}

	return nil
}

func (m *Person) validateName6(formats strfmt.Registry) error {

	if err := validate.Required("name6", "body", m.Name6); err != nil {
		return err
	}

	return nil
}

func (m *Person) validateStatuses(formats strfmt.Registry) error {

	if swag.IsZero(m.Statuses) { // not required
		return nil
	}

	for i := 0; i < len(m.Statuses); i++ {

	}

	return nil
}
