package model

import (
	"github.com/podhmo/maperr"
	"encoding/json"
)

// this file is generated by egoist.generators.structkit

type Article struct {
	Title string `json:"title"`
	Author *Author `json:"author"`
	Content string `json:"content"`
	Comments []Comment `json:"comments"`
}

func (a *Article) UnmarshalJSON(b []byte) error {
	var err *maperr.Error

	// loading internal data
	var inner struct {
		Title *string `json:"title"`// required
		Author *json.RawMessage `json:"author"`
		Content *string `json:"content"`// required
		Comments *json.RawMessage `json:"comments"`
	}
	if rawErr := json.Unmarshal(b, &inner); rawErr != nil  {
		return err.AddSummary(rawErr.Error())
	}

	// binding field value and required check
	{
		if inner.Title != nil  {
			a.Title = *inner.Title
		} else  {
			err = err.Add("title", maperr.Message{Text: "required"})
		}
		if inner.Author != nil  {
			a.Author = &Author{}
			if rawerr := json.Unmarshal(*inner.Author, a.Author); rawerr != nil  {
				err = err.Add("author", maperr.Message{Error: rawerr})
			}
		}
		if inner.Content != nil  {
			a.Content = *inner.Content
		} else  {
			err = err.Add("content", maperr.Message{Text: "required"})
		}
		if inner.Comments != nil  {
			a.Comments = []Comment{}
			if rawerr := json.Unmarshal(*inner.Comments, &a.Comments); rawerr != nil  {
				err = err.Add("comments", maperr.Message{Error: rawerr})
			}
		}
	}

	return err.Untyped()
}

type Author struct {
	Name string `json:"name"`
}

func (a *Author) UnmarshalJSON(b []byte) error {
	var err *maperr.Error

	// loading internal data
	var inner struct {
		Name *string `json:"name"`// required
	}
	if rawErr := json.Unmarshal(b, &inner); rawErr != nil  {
		return err.AddSummary(rawErr.Error())
	}

	// binding field value and required check
	{
		if inner.Name != nil  {
			a.Name = *inner.Name
		} else  {
			err = err.Add("name", maperr.Message{Text: "required"})
		}
	}

	return err.Untyped()
}

type Comment struct {
	Author Author `json:"author"`
	Content string `json:"content"`
}

func (c *Comment) UnmarshalJSON(b []byte) error {
	var err *maperr.Error

	// loading internal data
	var inner struct {
		Author *json.RawMessage `json:"author"`// required
		Content *string `json:"content"`// required
	}
	if rawErr := json.Unmarshal(b, &inner); rawErr != nil  {
		return err.AddSummary(rawErr.Error())
	}

	// binding field value and required check
	{
		if inner.Author != nil  {
			if rawerr := json.Unmarshal(*inner.Author, &c.Author); rawerr != nil  {
				err = err.Add("author", maperr.Message{Error: rawerr})
			}
		} else  {
			err = err.Add("author", maperr.Message{Text: "required"})
		}
		if inner.Content != nil  {
			c.Content = *inner.Content
		} else  {
			err = err.Add("content", maperr.Message{Text: "required"})
		}
	}

	return err.Untyped()
}