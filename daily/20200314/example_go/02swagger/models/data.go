package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Data data
// swagger:model data
type Data struct {

	// age
	Age int64 `json:"age,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// data additional properties
	DataAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *Data) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// age
		Age int64 `json:"age,omitempty"`

		// name
		Name string `json:"name,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv Data

	rcv.Age = stage1.Age

	rcv.Name = stage1.Name

	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "age")

	delete(stage2, "name")

	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.DataAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m Data) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// age
		Age int64 `json:"age,omitempty"`

		// name
		Name string `json:"name,omitempty"`
	}

	stage1.Age = m.Age

	stage1.Name = m.Name

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.DataAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.DataAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this data
func (m *Data) Validate(formats strfmt.Registry) error {
	var res []error

	if swag.IsZero(m.DataAdditionalProperties) { // not required
		return nil
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
