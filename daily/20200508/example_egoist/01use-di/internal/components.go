package components

import (
	"github.com/podhmo/maperr"
	"encoding/json"
)

// this file is generated by egoist.generate.structkit

type Z struct {
	X X `json:"x"`
	Y *X `json:"y"`
}

func (z *Z) UnmarshalJSON(b []byte) error {
	var err *maperr.Error

	// loading internal data
	var inner struct {
		X *json.RawMessage `json:"x"`// required
		Y *json.RawMessage `json:"y"`
	}
	if rawErr := json.Unmarshal(b, &inner); rawErr != nil  {
		return err.AddSummary(rawErr.Error())
	}

	// binding field value and required check
	{
		if inner.X != nil  {
			if rawerr := json.Unmarshal(*inner.X, &z.X); rawerr != nil  {
				err = err.Add("x", maperr.Message{Error: rawerr})
			}
		} else  {
			err = err.Add("x", maperr.Message{Text: "required"})
		}
		if inner.Y != nil  {
			z.Y = &X{}
			if rawerr := json.Unmarshal(*inner.Y, z.Y); rawerr != nil  {
				err = err.Add("y", maperr.Message{Error: rawerr})
			}
		}
	}

	return err.Untyped()
}

type X struct {
	Name string `json:"name"`
}

func (x *X) UnmarshalJSON(b []byte) error {
	var err *maperr.Error

	// loading internal data
	var inner struct {
		Name *string `json:"name"`// required
	}
	if rawErr := json.Unmarshal(b, &inner); rawErr != nil  {
		return err.AddSummary(rawErr.Error())
	}

	// binding field value and required check
	{
		if inner.Name != nil  {
			x.Name = *inner.Name
		} else  {
			err = err.Add("name", maperr.Message{Text: "required"})
		}
	}

	return err.Untyped()
}