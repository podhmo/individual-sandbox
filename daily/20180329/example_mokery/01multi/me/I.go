package me

import (
	"github.com/stretchr/testify/mock"
	"time"
)

// I is an autogenerated mock type for the I type
type I struct {
	mock.Mock
}
// F provides a mock function with given fields: 
func (_m *I) F()  {
	_m.Called()
}
// G provides a mock function with given fields: x
func (_m *I) G(x string) (int, error) {
	ret := _m.Called(x)
	var r0 int
	if rf, ok := ret.Get(0).(func(x string) int); ok {
		r0 = rf(x)
	} else {
		r0 = ret.Get(0).(int)
	}
	var r1 error
	if rf, ok := ret.Get(1).(func(x string) error); ok {
		r1 = rf(x)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}
// H provides a mock function with given fields: x, y
func (_m *I) H(x string, y time.Time) (chan int, error) {
	ret := _m.Called(x, y)
	var r0 chan int
	if rf, ok := ret.Get(0).(func(x string, y time.Time) chan int); ok {
		r0 = rf(x, y)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan int)
		}
	}
	var r1 error
	if rf, ok := ret.Get(1).(func(x string, y time.Time) error); ok {
		r1 = rf(x, y)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}
