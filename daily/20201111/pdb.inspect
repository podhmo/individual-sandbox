pdb:Pdb <- bdb:Bdb <- cmd:Cmd <- builtins:object
    [method, OVERRIDE] __init__(self, completekey='tab', stdin=None, stdout=None, skip=None, nosigint=False, readrc=True)
    [method] _complete_bpnumber(self, text, line, begidx, endidx)
    [method] _complete_location(self, text, line, begidx, endidx)
        [method] _complete_expression(self, text, line, begidx, endidx)
    [method] _runmodule(self, module_name)
    [method] _runscript(self, filename)
    [method] complete_b(self, text, line, begidx, endidx)
        [method] _complete_expression(self, text, line, begidx, endidx)
    [method] complete_break(self, text, line, begidx, endidx)
        [method] _complete_expression(self, text, line, begidx, endidx)
    [method] complete_cl(self, text, line, begidx, endidx)
        [method] _complete_expression(self, text, line, begidx, endidx)
    [method] complete_clear(self, text, line, begidx, endidx)
        [method] _complete_expression(self, text, line, begidx, endidx)
    [method] complete_commands(self, text, line, begidx, endidx)
    [method] complete_condition(self, text, line, begidx, endidx)
    [method] complete_debug(self, text, line, begidx, endidx)
    [method] complete_disable(self, text, line, begidx, endidx)
    [method] complete_display(self, text, line, begidx, endidx)
    [method] complete_enable(self, text, line, begidx, endidx)
    [method] complete_ignore(self, text, line, begidx, endidx)
    [method] complete_p(self, text, line, begidx, endidx)
    [method] complete_pp(self, text, line, begidx, endidx)
    [method] complete_print(self, text, line, begidx, endidx)
    [method] complete_source(self, text, line, begidx, endidx)
    [method] complete_tbreak(self, text, line, begidx, endidx)
        [method] _complete_expression(self, text, line, begidx, endidx)
    [method] complete_unalias(self, text, line, begidx, endidx)
    [method] complete_undisplay(self, text, line, begidx, endidx)
    [method] complete_whatis(self, text, line, begidx, endidx)
    [method] do_EOF(self, arg)
        [method] message(self, msg)
    [method] do_a(self, arg)
        [method] message(self, msg)
    [method] do_alias(self, arg)
        [method] message(self, msg)
    [method] do_args(self, arg)
        [method] message(self, msg)
    [method] do_b(self, arg, temporary=0)
        [method] checkline(self, filename, lineno)
            [method] message(self, msg)
            [method] error(self, msg)
        [method] lookupmodule(self, filename)
        [method] defaultFile(self)
        [method] message(self, msg)
        [method] error(self, msg)
        [method] lineinfo(self, identifier)
            [method] defaultFile(self)
            [method] lookupmodule(self, filename)
    [method] do_bt(self, arg)
        [method] print_stack_trace(self)
            [method] print_stack_entry(self, frame_lineno, prompt_prefix='\n-> ')
                [method] message(self, msg)
    [method] do_c(self, arg)
        [method] sigint_handler(self, signum, frame)
            [method] message(self, msg)
    [method] do_cl(self, arg)
        [method] error(self, msg)
        [method] message(self, msg)
    [method, OVERRIDE] do_clear(self, arg)
        [method] error(self, msg)
        [method] message(self, msg)
    [method] do_commands(self, arg)
        [method] error(self, msg)
    [method] do_condition(self, arg)
        [method] error(self, msg)
        [method] message(self, msg)
    [method] do_cont(self, arg)
        [method] sigint_handler(self, signum, frame)
            [method] message(self, msg)
    [method] do_continue(self, arg)
        [method] sigint_handler(self, signum, frame)
            [method] message(self, msg)
    [method] do_d(self, arg)
        [method] _select_frame(self, number)
            [method] print_stack_entry(self, frame_lineno, prompt_prefix='\n-> ')
                [method] message(self, msg)
        [method] error(self, msg)
    [method] do_debug(self, arg)
        [method] message(self, msg)
        [method] error(self, msg)
    [method] do_disable(self, arg)
        [method] message(self, msg)
        [method] error(self, msg)
    [method] do_display(self, arg)
        [method] message(self, msg)
        [method] _getval_except(self, arg, frame=None)
    [method] do_down(self, arg)
        [method] _select_frame(self, number)
            [method] print_stack_entry(self, frame_lineno, prompt_prefix='\n-> ')
                [method] message(self, msg)
        [method] error(self, msg)
    [method] do_enable(self, arg)
        [method] message(self, msg)
        [method] error(self, msg)
    [method] do_exit(self, arg)
    [method] do_h(self, arg)
        [method] message(self, msg)
        [method] error(self, msg)
    [method, OVERRIDE] do_help(self, arg)
        [method] message(self, msg)
        [method] error(self, msg)
    [method] do_ignore(self, arg)
        [method] error(self, msg)
        [method] message(self, msg)
    [method] do_interact(self, arg)
    [method] do_j(self, arg)
        [method] error(self, msg)
        [method] print_stack_entry(self, frame_lineno, prompt_prefix='\n-> ')
            [method] message(self, msg)
    [method] do_jump(self, arg)
        [method] error(self, msg)
        [method] print_stack_entry(self, frame_lineno, prompt_prefix='\n-> ')
            [method] message(self, msg)
    [method] do_l(self, arg)
        [method] _print_lines(self, lines, start, breaks=(), frame=None)
            [method] message(self, msg)
        [method] message(self, msg)
        [method] error(self, msg)
    [method] do_list(self, arg)
        [method] _print_lines(self, lines, start, breaks=(), frame=None)
            [method] message(self, msg)
        [method] message(self, msg)
        [method] error(self, msg)
    [method] do_ll(self, arg)
        [method] _print_lines(self, lines, start, breaks=(), frame=None)
            [method] message(self, msg)
        [method] error(self, msg)
    [method] do_longlist(self, arg)
        [method] _print_lines(self, lines, start, breaks=(), frame=None)
            [method] message(self, msg)
        [method] error(self, msg)
    [method] do_n(self, arg)
    [method] do_next(self, arg)
    [method] do_p(self, arg)
        [method] message(self, msg)
        [method] _getval(self, arg)
            [method] error(self, msg)
    [method] do_pp(self, arg)
        [method] message(self, msg)
        [method] _getval(self, arg)
            [method] error(self, msg)
    [method] do_q(self, arg)
    [method] do_quit(self, arg)
    [method] do_r(self, arg)
    [method] do_restart(self, arg)
    [method] do_return(self, arg)
    [method] do_retval(self, arg)
        [method] message(self, msg)
        [method] error(self, msg)
    [method] do_run(self, arg)
    [method] do_rv(self, arg)
        [method] message(self, msg)
        [method] error(self, msg)
    [method] do_s(self, arg)
    [method] do_source(self, arg)
        [method] _print_lines(self, lines, start, breaks=(), frame=None)
            [method] message(self, msg)
        [method] _getval(self, arg)
            [method] error(self, msg)
        [method] error(self, msg)
    [method] do_step(self, arg)
    [method] do_tbreak(self, arg)
        [method] do_break(self, arg, temporary=0)
            [method] checkline(self, filename, lineno)
                [method] message(self, msg)
                [method] error(self, msg)
            [method] lookupmodule(self, filename)
            [method] defaultFile(self)
            [method] message(self, msg)
            [method] error(self, msg)
            [method] lineinfo(self, identifier)
                [method] defaultFile(self)
                [method] lookupmodule(self, filename)
    [method] do_u(self, arg)
        [method] _select_frame(self, number)
            [method] print_stack_entry(self, frame_lineno, prompt_prefix='\n-> ')
                [method] message(self, msg)
        [method] error(self, msg)
    [method] do_unalias(self, arg)
    [method] do_undisplay(self, arg)
        [method] error(self, msg)
    [method] do_unt(self, arg)
        [method] error(self, msg)
    [method] do_until(self, arg)
        [method] error(self, msg)
    [method] do_up(self, arg)
        [method] _select_frame(self, number)
            [method] print_stack_entry(self, frame_lineno, prompt_prefix='\n-> ')
                [method] message(self, msg)
        [method] error(self, msg)
    [method] do_w(self, arg)
        [method] print_stack_trace(self)
            [method] print_stack_entry(self, frame_lineno, prompt_prefix='\n-> ')
                [method] message(self, msg)
    [method] do_whatis(self, arg)
        [method] message(self, msg)
        [method] _getval(self, arg)
            [method] error(self, msg)
    [method] do_where(self, arg)
        [method] print_stack_trace(self)
            [method] print_stack_entry(self, frame_lineno, prompt_prefix='\n-> ')
                [method] message(self, msg)
    [method] help_pdb(self)
    [method, OVERRIDE] precmd(self, line)
    [method, OVERRIDE] preloop(self)
        [method] _getval_except(self, arg, frame=None)
        [method] message(self, msg)
    [method, OVERRIDE] reset(self)
        [method] forget(self)
    [method, OVERRIDE] user_call(self, frame, argument_list)
        [method] message(self, msg)
        [method] interaction(self, frame, traceback)
            [method] setup(self, f, tb)
                [method] forget(self)
                [method] execRcLines(self)
                    [method, OVERRIDE] onecmd(self, line)
                        [method] handle_command_def(self, line)
                            [method, OVERRIDE] default(self, line)
                                [method] displayhook(self, obj)
                                    [method] message(self, msg)
                                [method] error(self, msg)
            [method] print_stack_entry(self, frame_lineno, prompt_prefix='\n-> ')
                [method] message(self, msg)
            [method] _cmdloop(self)
                [method] message(self, msg)
            [method] forget(self)
    [method, OVERRIDE] user_exception(self, frame, exc_info)
        [method] message(self, msg)
        [method] interaction(self, frame, traceback)
            [method] setup(self, f, tb)
                [method] forget(self)
                [method] execRcLines(self)
                    [method, OVERRIDE] onecmd(self, line)
                        [method] handle_command_def(self, line)
                            [method, OVERRIDE] default(self, line)
                                [method] displayhook(self, obj)
                                    [method] message(self, msg)
                                [method] error(self, msg)
            [method] print_stack_entry(self, frame_lineno, prompt_prefix='\n-> ')
                [method] message(self, msg)
            [method] _cmdloop(self)
                [method] message(self, msg)
            [method] forget(self)
    [method, OVERRIDE] user_line(self, frame)
        [method] bp_commands(self, frame)
            [method] setup(self, f, tb)
                [method] forget(self)
                [method] execRcLines(self)
                    [method, OVERRIDE] onecmd(self, line)
                        [method] handle_command_def(self, line)
                            [method, OVERRIDE] default(self, line)
                                [method] displayhook(self, obj)
                                    [method] message(self, msg)
                                [method] error(self, msg)
            [method] forget(self)
            [method, OVERRIDE] onecmd(self, line)
                [method] handle_command_def(self, line)
                    [method, OVERRIDE] default(self, line)
                        [method] displayhook(self, obj)
                            [method] message(self, msg)
                        [method] error(self, msg)
            [method] print_stack_entry(self, frame_lineno, prompt_prefix='\n-> ')
                [method] message(self, msg)
            [method] _cmdloop(self)
                [method] message(self, msg)
        [method] interaction(self, frame, traceback)
            [method] setup(self, f, tb)
                [method] forget(self)
                [method] execRcLines(self)
                    [method, OVERRIDE] onecmd(self, line)
                        [method] handle_command_def(self, line)
                            [method, OVERRIDE] default(self, line)
                                [method] displayhook(self, obj)
                                    [method] message(self, msg)
                                [method] error(self, msg)
            [method] print_stack_entry(self, frame_lineno, prompt_prefix='\n-> ')
                [method] message(self, msg)
            [method] _cmdloop(self)
                [method] message(self, msg)
            [method] forget(self)
    [method, OVERRIDE] user_return(self, frame, return_value)
        [method] message(self, msg)
        [method] interaction(self, frame, traceback)
            [method] setup(self, f, tb)
                [method] forget(self)
                [method] execRcLines(self)
                    [method, OVERRIDE] onecmd(self, line)
                        [method] handle_command_def(self, line)
                            [method, OVERRIDE] default(self, line)
                                [method] displayhook(self, obj)
                                    [method] message(self, msg)
                                [method] error(self, msg)
            [method] print_stack_entry(self, frame_lineno, prompt_prefix='\n-> ')
                [method] message(self, msg)
            [method] _cmdloop(self)
                [method] message(self, msg)
            [method] forget(self)
    [method] help_exec(self)
        [method] message(self, msg)

bdb:Bdb <- builtins:object
    [method, OVERRIDE] __init__(self, skip=None)
    [method] clear_all_breaks(self)
    [method] clear_all_file_breaks(self, filename)
        [method] canonic(self, filename)
    [method] clear_bpbynumber(self, arg)
        [method] _prune_breaks(self, filename, lineno)
        [method] get_bpbynumber(self, arg)
    [method] clear_break(self, filename, lineno)
        [method] canonic(self, filename)
        [method] _prune_breaks(self, filename, lineno)
    [method] format_stack_entry(self, frame_lineno, lprefix=': ')
        [method] canonic(self, filename)
    [method] get_all_breaks(self)
    [method] get_break(self, filename, lineno)
        [method] canonic(self, filename)
    [method] get_breaks(self, filename, lineno)
        [method] canonic(self, filename)
    [method] get_file_breaks(self, filename)
        [method] canonic(self, filename)
    [method] get_stack(self, f, t)
    [method] runcall(self, func, /, *args, **kwds)
        [method] reset(self)
            [method] _set_stopinfo(self, stopframe, returnframe, stoplineno=0)
        [method] trace_dispatch(self, frame, event, arg)
            [method] dispatch_line(self, frame)
                [method] stop_here(self, frame)
                    [method] is_skipped_module(self, module_name)
                [method] break_here(self, frame)
                    [method] canonic(self, filename)
                    [method] do_clear(self, arg)
                [method] user_line(self, frame)
            [method] dispatch_call(self, frame, arg)
                [method] user_call(self, frame, argument_list)
                [method] stop_here(self, frame)
                    [method] is_skipped_module(self, module_name)
                [method] break_anywhere(self, frame)
                    [method] canonic(self, filename)
            [method] dispatch_return(self, frame, arg)
                [method] stop_here(self, frame)
                    [method] is_skipped_module(self, module_name)
                [method] user_return(self, frame, return_value)
                [method] _set_stopinfo(self, stopframe, returnframe, stoplineno=0)
            [method] dispatch_exception(self, frame, arg)
                [method] stop_here(self, frame)
                    [method] is_skipped_module(self, module_name)
                [method] user_exception(self, frame, exc_info)
    [method] runctx(self, cmd, globals, locals)
        [method] run(self, cmd, globals=None, locals=None)
            [method] reset(self)
                [method] _set_stopinfo(self, stopframe, returnframe, stoplineno=0)
            [method] trace_dispatch(self, frame, event, arg)
                [method] dispatch_line(self, frame)
                    [method] stop_here(self, frame)
                        [method] is_skipped_module(self, module_name)
                    [method] break_here(self, frame)
                        [method] canonic(self, filename)
                        [method] do_clear(self, arg)
                    [method] user_line(self, frame)
                [method] dispatch_call(self, frame, arg)
                    [method] user_call(self, frame, argument_list)
                    [method] stop_here(self, frame)
                        [method] is_skipped_module(self, module_name)
                    [method] break_anywhere(self, frame)
                        [method] canonic(self, filename)
                [method] dispatch_return(self, frame, arg)
                    [method] stop_here(self, frame)
                        [method] is_skipped_module(self, module_name)
                    [method] user_return(self, frame, return_value)
                    [method] _set_stopinfo(self, stopframe, returnframe, stoplineno=0)
                [method] dispatch_exception(self, frame, arg)
                    [method] stop_here(self, frame)
                        [method] is_skipped_module(self, module_name)
                    [method] user_exception(self, frame, exc_info)
    [method] runeval(self, expr, globals=None, locals=None)
        [method] reset(self)
            [method] _set_stopinfo(self, stopframe, returnframe, stoplineno=0)
        [method] trace_dispatch(self, frame, event, arg)
            [method] dispatch_line(self, frame)
                [method] stop_here(self, frame)
                    [method] is_skipped_module(self, module_name)
                [method] break_here(self, frame)
                    [method] canonic(self, filename)
                    [method] do_clear(self, arg)
                [method] user_line(self, frame)
            [method] dispatch_call(self, frame, arg)
                [method] user_call(self, frame, argument_list)
                [method] stop_here(self, frame)
                    [method] is_skipped_module(self, module_name)
                [method] break_anywhere(self, frame)
                    [method] canonic(self, filename)
            [method] dispatch_return(self, frame, arg)
                [method] stop_here(self, frame)
                    [method] is_skipped_module(self, module_name)
                [method] user_return(self, frame, return_value)
                [method] _set_stopinfo(self, stopframe, returnframe, stoplineno=0)
            [method] dispatch_exception(self, frame, arg)
                [method] stop_here(self, frame)
                    [method] is_skipped_module(self, module_name)
                [method] user_exception(self, frame, exc_info)
    [method] set_break(self, filename, lineno, temporary=False, cond=None, funcname=None)
        [method] canonic(self, filename)
    [method] set_continue(self)
        [method] _set_stopinfo(self, stopframe, returnframe, stoplineno=0)
    [method] set_next(self, frame)
        [method] _set_stopinfo(self, stopframe, returnframe, stoplineno=0)
    [method] set_quit(self)
    [method] set_return(self, frame)
        [method] _set_stopinfo(self, stopframe, returnframe, stoplineno=0)
    [method] set_trace(self, frame=None)
        [method] reset(self)
            [method] _set_stopinfo(self, stopframe, returnframe, stoplineno=0)
        [method] trace_dispatch(self, frame, event, arg)
            [method] dispatch_line(self, frame)
                [method] stop_here(self, frame)
                    [method] is_skipped_module(self, module_name)
                [method] break_here(self, frame)
                    [method] canonic(self, filename)
                    [method] do_clear(self, arg)
                [method] user_line(self, frame)
            [method] dispatch_call(self, frame, arg)
                [method] user_call(self, frame, argument_list)
                [method] stop_here(self, frame)
                    [method] is_skipped_module(self, module_name)
                [method] break_anywhere(self, frame)
                    [method] canonic(self, filename)
            [method] dispatch_return(self, frame, arg)
                [method] stop_here(self, frame)
                    [method] is_skipped_module(self, module_name)
                [method] user_return(self, frame, return_value)
                [method] _set_stopinfo(self, stopframe, returnframe, stoplineno=0)
            [method] dispatch_exception(self, frame, arg)
                [method] stop_here(self, frame)
                    [method] is_skipped_module(self, module_name)
                [method] user_exception(self, frame, exc_info)
        [method] set_step(self)
            [method] _set_stopinfo(self, stopframe, returnframe, stoplineno=0)
            [method] trace_dispatch(self, frame, event, arg)
                [method] dispatch_line(self, frame)
                    [method] stop_here(self, frame)
                        [method] is_skipped_module(self, module_name)
                    [method] break_here(self, frame)
                        [method] canonic(self, filename)
                        [method] do_clear(self, arg)
                    [method] user_line(self, frame)
                [method] dispatch_call(self, frame, arg)
                    [method] user_call(self, frame, argument_list)
                    [method] stop_here(self, frame)
                        [method] is_skipped_module(self, module_name)
                    [method] break_anywhere(self, frame)
                        [method] canonic(self, filename)
                [method] dispatch_return(self, frame, arg)
                    [method] stop_here(self, frame)
                        [method] is_skipped_module(self, module_name)
                    [method] user_return(self, frame, return_value)
                    [method] _set_stopinfo(self, stopframe, returnframe, stoplineno=0)
                [method] dispatch_exception(self, frame, arg)
                    [method] stop_here(self, frame)
                        [method] is_skipped_module(self, module_name)
                    [method] user_exception(self, frame, exc_info)
    [method] set_until(self, frame, lineno=None)
        [method] _set_stopinfo(self, stopframe, returnframe, stoplineno=0)

cmd:Cmd <- builtins:object
    [method, OVERRIDE] __init__(self, completekey='tab', stdin=None, stdout=None)
    [method] cmdloop(self, intro=None)
        [method] preloop(self)
        [method] postloop(self)
        [method] complete(self, text, state)
            [method] completenames(self, text, *ignored)
                [method] get_names(self)
            [method] parseline(self, line)
            [method] completedefault(self, *ignored)
        [method] precmd(self, line)
        [method] onecmd(self, line)
            [method] parseline(self, line)
            [method] emptyline(self)
            [method] default(self, line)
        [method] postcmd(self, stop, line)
    [method] complete_help(self, *args)
        [method] completenames(self, text, *ignored)
            [method] get_names(self)
        [method] get_names(self)
    [method] do_help(self, arg)
        [method] get_names(self)
        [method] print_topics(self, header, cmds, cmdlen, maxcol)
            [method] columnize(self, list, displaywidth=80)

