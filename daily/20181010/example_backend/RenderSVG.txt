matplotlib.backends.backend_svg.RendererSVG <- matplotlib.backend_bases.RendererBase <- builtins.object
    [method, OVERRIDE] __init__(self, width, height, svgwriter, basename=None, image_dpi=72)
        [method] _write_default_style(self)
    [method, OVERRIDE] close_group(self, s)
    [method, OVERRIDE] draw_gouraud_triangles(self, gc, triangles_array, colors_array, transform)
        [method] _get_clip(self, gc)
            [method] _make_flip_transform(self, transform)
            [method] _make_id(self, type, content)
        [method, OVERRIDE] draw_gouraud_triangle(self, gc, points, colors, trans)
            [method] _make_flip_transform(self, transform)
    [method, OVERRIDE] draw_image(self, gc, x, y, im, transform=None)
        [method] _get_clip(self, gc)
            [method] _make_flip_transform(self, transform)
            [method] _make_id(self, type, content)
        [method] _make_id(self, type, content)
    [method, OVERRIDE] draw_markers(self, gc, marker_path, marker_trans, path, trans, rgbFace=None)
        [method] _convert_path(self, path, transform=None, clip=None, simplify=None, sketch=None)
        [method] _get_style_dict(self, gc, rgbFace)
            [method] _get_hatch(self, gc, rgbFace)
                [method] _make_id(self, type, content)
        [method] _get_clip(self, gc)
            [method] _make_flip_transform(self, transform)
            [method] _make_id(self, type, content)
        [method] _make_flip_transform(self, transform)
        [method] _make_id(self, type, content)
        [method] _get_style(self, gc, rgbFace)
            [method] _get_style_dict(self, gc, rgbFace)
                [method] _get_hatch(self, gc, rgbFace)
                    [method] _make_id(self, type, content)
    [method, OVERRIDE] draw_path(self, gc, path, transform, rgbFace=None)
        [method] _make_flip_transform(self, transform)
        [method] _convert_path(self, path, transform=None, clip=None, simplify=None, sketch=None)
        [method] _get_style(self, gc, rgbFace)
            [method] _get_style_dict(self, gc, rgbFace)
                [method] _get_hatch(self, gc, rgbFace)
                    [method] _make_id(self, type, content)
        [method] _get_clip(self, gc)
            [method] _make_flip_transform(self, transform)
            [method] _make_id(self, type, content)
    [method, OVERRIDE] draw_path_collection(self, gc, master_transform, paths, all_transforms, offsets, offsetTrans, facecolors, edgecolors, linewidths, linestyles, antialiaseds, urls, offset_position)
        [method] _convert_path(self, path, transform=None, clip=None, simplify=None, sketch=None)
        [method] _get_clip(self, gc)
            [method] _make_flip_transform(self, transform)
            [method] _make_id(self, type, content)
        [method] _get_style(self, gc, rgbFace)
            [method] _get_style_dict(self, gc, rgbFace)
                [method] _get_hatch(self, gc, rgbFace)
                    [method] _make_id(self, type, content)
        [method] _make_id(self, type, content)
    [method, OVERRIDE] draw_tex(self, gc, x, y, s, prop, angle, ismath='TeX!', mtext=None)
        [method, OVERRIDE] _draw_text_as_path(self, gc, x, y, s, prop, angle, ismath, mtext=None)
            [method] _adjust_char_id(self, char_id)
            [method] _convert_path(self, path, transform=None, clip=None, simplify=None, sketch=None)
    [method, OVERRIDE] draw_text(self, gc, x, y, s, prop, angle, ismath=False, mtext=None)
        [method] _get_clip(self, gc)
            [method] _make_flip_transform(self, transform)
            [method] _make_id(self, type, content)
        [method, OVERRIDE] _draw_text_as_path(self, gc, x, y, s, prop, angle, ismath, mtext=None)
            [method] _adjust_char_id(self, char_id)
            [method] _convert_path(self, path, transform=None, clip=None, simplify=None, sketch=None)
        [method] _draw_text_as_text(self, gc, x, y, s, prop, angle, ismath, mtext=None)
            [method] _get_font(self, prop)
    [method] finalize(self)
        [method] _write_clips(self)
            [method] _convert_path(self, path, transform=None, clip=None, simplify=None, sketch=None)
        [method] _write_hatches(self)
            [method] _convert_path(self, path, transform=None, clip=None, simplify=None, sketch=None)
        [method] _write_svgfonts(self)
            [method] _convert_path(self, path, transform=None, clip=None, simplify=None, sketch=None)
    [method, OVERRIDE] flipy(self)
    [method, OVERRIDE] get_canvas_width_height(self)
    [method, OVERRIDE] get_image_magnification(self)
    [method, OVERRIDE] get_text_width_height_descent(self, s, prop, ismath)
    [method, OVERRIDE] open_group(self, s, gid=None)
    [method, OVERRIDE] option_image_nocomposite(self)
    [method, OVERRIDE] option_scale_image(self)

matplotlib.backend_bases.RendererBase <- builtins.object
    [method, OVERRIDE] __init__(self)
    [method] _iter_collection_uses_per_path(self, paths, all_transforms, offsets, facecolors, edgecolors)
    [method] close_group(self, s)
    [method] draw_gouraud_triangles(self, gc, triangles_array, colors_array, transform)
        [method] draw_gouraud_triangle(self, gc, points, colors, transform)
    [method] draw_image(self, gc, x, y, im, transform=None)
    [method] draw_markers(self, gc, marker_path, marker_trans, path, trans, rgbFace=None)
        [method] draw_path(self, gc, path, transform, rgbFace=None)
    [method] draw_quad_mesh(self, gc, master_transform, meshWidth, meshHeight, coordinates, offsets, offsetTrans, facecolors, antialiased, edgecolors)
        [method] draw_path_collection(self, gc, master_transform, paths, all_transforms, offsets, offsetTrans, facecolors, edgecolors, linewidths, linestyles, antialiaseds, urls, offset_position)
            [method] _iter_collection_raw_paths(self, master_transform, paths, all_transforms)
            [method] _iter_collection(self, gc, master_transform, all_transforms, path_ids, offsets, offsetTrans, facecolors, edgecolors, linewidths, linestyles, antialiaseds, urls, offset_position)
                [method] new_gc(self)
            [method] draw_path(self, gc, path, transform, rgbFace=None)
    [method] draw_tex(self, gc, x, y, s, prop, angle, ismath='TeX!', mtext=None)
        [method] _draw_text_as_path(self, gc, x, y, s, prop, angle, ismath)
            [method] _get_text_path_transform(self, x, y, s, prop, angle, ismath)
                [method] points_to_pixels(self, points)
                [method] flipy(self)
            [method] draw_path(self, gc, path, transform, rgbFace=None)
    [method] draw_text(self, gc, x, y, s, prop, angle, ismath=False, mtext=None)
        [method] _draw_text_as_path(self, gc, x, y, s, prop, angle, ismath)
            [method] _get_text_path_transform(self, x, y, s, prop, angle, ismath)
                [method] points_to_pixels(self, points)
                [method] flipy(self)
            [method] draw_path(self, gc, path, transform, rgbFace=None)
    [method] get_canvas_width_height(self)
    [method] get_image_magnification(self)
    [method] get_texmanager(self)
    [method] get_text_width_height_descent(self, s, prop, ismath)
        [method] points_to_pixels(self, points)
    [method] open_group(self, s, gid=None)
    [method] option_image_nocomposite(self)
    [method] option_scale_image(self)
    [method] start_filter(self)
    [method] start_rasterizing(self)
    [method] stop_filter(self, filter_func)
    [method] stop_rasterizing(self)
    [method] strip_math(self, s)
