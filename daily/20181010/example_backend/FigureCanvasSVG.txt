matplotlib.backends.backend_svg.FigureCanvasSVG <- matplotlib.backend_bases.FigureCanvasBase <- builtins.object
    [method, OVERRIDE] get_default_filetype(self)
    [method] print_svgz(self, filename, *args, **kwargs)
        [method] print_svg(self, filename, *args, **kwargs)
            [method] _print_svg(self, filename, fh, **kwargs)

matplotlib.backend_bases.FigureCanvasBase <- builtins.object
    [method, OVERRIDE] __init__(self, figure)
        [method] mpl_connect(self, s, func)
        [method] pick(self, mouseevent)
    [method] blit(self, bbox=None)
    [method] button_press_event(self, x, y, button, dblclick=False, guiEvent=None)
    [method] button_release_event(self, x, y, button, guiEvent=None)
    [method] close_event(self, guiEvent=None)
    [method] draw_cursor(self, event)
    [method] draw_event(self, renderer)
    [method] enter_notify_event(self, guiEvent=None, xy=None)
    [method] get_default_filename(self)
        [class method] get_default_filetype()
        [method] get_window_title(self)
    [class method] get_supported_filetypes_grouped()
    [method] get_width_height(self)
    [method] grab_mouse(self, ax)
    [method] idle_event(self, guiEvent=None)
    [method] is_saving(self)
    [method] key_press_event(self, key, guiEvent=None)
    [method] key_release_event(self, key, guiEvent=None)
    [method] leave_notify_event(self, guiEvent=None)
    [method] motion_notify_event(self, x, y, guiEvent=None)
    [method] mpl_disconnect(self, cid)
    [method] new_timer(self, *args, **kwargs)
    [method] onRemove(self, ev)
        [method] draw_idle(self, *args, **kwargs)
            [method] _idle_draw_cntx(self)
            [method] draw(self, *args, **kwargs)
    [method] pick_event(self, mouseevent, artist, **kwargs)
    [method] print_figure(self, filename, dpi=None, facecolor=None, edgecolor=None, orientation='portrait', format=None, **kwargs)
        [method] _get_output_canvas(self, fmt)
            [method] switch_backends(self, FigureCanvasClass)
            [class method] get_supported_filetypes()
        [class method] get_default_filetype()
    [method] release_mouse(self, ax)
    [method] resize(self, w, h)
    [method] resize_event(self)
        [method] draw_idle(self, *args, **kwargs)
            [method] _idle_draw_cntx(self)
            [method] draw(self, *args, **kwargs)
    [method] scroll_event(self, x, y, step, guiEvent=None)
    [method] set_window_title(self, title)
    [method] start_event_loop(self, timeout=0)
        [method] flush_events(self)
    [method] start_event_loop_default(self, timeout=0)
        [method] flush_events(self)
    [method] stop_event_loop(self)
    [method] stop_event_loop_default(self)
