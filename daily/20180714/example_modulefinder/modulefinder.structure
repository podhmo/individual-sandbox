modulefinder.Module <- builtins.object
    [method, OVERRIDE] __init__(self, name, file=None, path=None)
    [method, OVERRIDE] __repr__(self)

----------------------------------------
modulefinder.ModuleFinder <- builtins.object
    [method, OVERRIDE] __init__(self, path=None, debug=0, excludes=[], replace_paths=[])
    [method] any_missing(self)
        [method] any_missing_maybe(self)
    [method] load_file(self, pathname)
        [method] load_module(self, fqname, fp, pathname, file_info)
            [method] msgin(self, *args)
                [method] msg(self, level, str, *args)
            [method] add_module(self, fqname)
            [method] msgout(self, *args)
                [method] msg(self, level, str, *args)
            [method] load_package(self, fqname, pathname)
                [method] msgin(self, *args)
                    [method] msg(self, level, str, *args)
                [method] add_module(self, fqname)
                [method] find_module(self, name, path, parent=None)
                    [method] msgout(self, *args)
                        [method] msg(self, level, str, *args)
                [method] msgout(self, *args)
                    [method] msg(self, level, str, *args)
            [method] scan_code(self, co, m)
                [method] scan_opcodes(self, co)
                [method] _safe_import_hook(self, name, caller, fromlist, level=-1)
                    [method] _add_badmodule(self, name, caller)
                    [method] import_hook(self, name, caller=None, fromlist=None, level=-1)
                        [method] msg(self, level, str, *args)
                        [method] determine_parent(self, caller, level=-1)
                            [method] msgin(self, *args)
                                [method] msg(self, level, str, *args)
                            [method] msgout(self, *args)
                                [method] msg(self, level, str, *args)
                        [method] find_head_package(self, parent, name)
                            [method] msgin(self, *args)
                                [method] msg(self, level, str, *args)
                            [method] import_module(self, partname, fqname, parent)
                                [method] msgin(self, *args)
                                    [method] msg(self, level, str, *args)
                                [method] msgout(self, *args)
                                    [method] msg(self, level, str, *args)
                                [method] find_module(self, name, path, parent=None)
                                    [method] msgout(self, *args)
                                        [method] msg(self, level, str, *args)
                            [method] msgout(self, *args)
                                [method] msg(self, level, str, *args)
                        [method] load_tail(self, q, tail)
                            [method] msgin(self, *args)
                                [method] msg(self, level, str, *args)
                            [method] msgout(self, *args)
                                [method] msg(self, level, str, *args)
                            [method] import_module(self, partname, fqname, parent)
                                [method] msgin(self, *args)
                                    [method] msg(self, level, str, *args)
                                [method] msgout(self, *args)
                                    [method] msg(self, level, str, *args)
                                [method] find_module(self, name, path, parent=None)
                                    [method] msgout(self, *args)
                                        [method] msg(self, level, str, *args)
                        [method] ensure_fromlist(self, m, fromlist, recursive=0)
                            [method] msg(self, level, str, *args)
                            [method] find_all_submodules(self, m)
                                [method] msg(self, level, str, *args)
                            [method] import_module(self, partname, fqname, parent)
                                [method] msgin(self, *args)
                                    [method] msg(self, level, str, *args)
                                [method] msgout(self, *args)
                                    [method] msg(self, level, str, *args)
                                [method] find_module(self, name, path, parent=None)
                                    [method] msgout(self, *args)
                                        [method] msg(self, level, str, *args)
                    [method] msg(self, level, str, *args)
                [method] determine_parent(self, caller, level=-1)
                    [method] msgin(self, *args)
                        [method] msg(self, level, str, *args)
                    [method] msgout(self, *args)
                        [method] msg(self, level, str, *args)
            [method] replace_paths_in_code(self, co)
                [method] msgout(self, *args)
                    [method] msg(self, level, str, *args)
    [method] report(self)
        [method] any_missing_maybe(self)
    [method] run_script(self, pathname)
        [method] msg(self, level, str, *args)
        [method] load_module(self, fqname, fp, pathname, file_info)
            [method] msgin(self, *args)
                [method] msg(self, level, str, *args)
            [method] add_module(self, fqname)
            [method] msgout(self, *args)
                [method] msg(self, level, str, *args)
            [method] load_package(self, fqname, pathname)
                [method] msgin(self, *args)
                    [method] msg(self, level, str, *args)
                [method] add_module(self, fqname)
                [method] find_module(self, name, path, parent=None)
                    [method] msgout(self, *args)
                        [method] msg(self, level, str, *args)
                [method] msgout(self, *args)
                    [method] msg(self, level, str, *args)
            [method] scan_code(self, co, m)
                [method] scan_opcodes(self, co)
                [method] _safe_import_hook(self, name, caller, fromlist, level=-1)
                    [method] _add_badmodule(self, name, caller)
                    [method] import_hook(self, name, caller=None, fromlist=None, level=-1)
                        [method] msg(self, level, str, *args)
                        [method] determine_parent(self, caller, level=-1)
                            [method] msgin(self, *args)
                                [method] msg(self, level, str, *args)
                            [method] msgout(self, *args)
                                [method] msg(self, level, str, *args)
                        [method] find_head_package(self, parent, name)
                            [method] msgin(self, *args)
                                [method] msg(self, level, str, *args)
                            [method] import_module(self, partname, fqname, parent)
                                [method] msgin(self, *args)
                                    [method] msg(self, level, str, *args)
                                [method] msgout(self, *args)
                                    [method] msg(self, level, str, *args)
                                [method] find_module(self, name, path, parent=None)
                                    [method] msgout(self, *args)
                                        [method] msg(self, level, str, *args)
                            [method] msgout(self, *args)
                                [method] msg(self, level, str, *args)
                        [method] load_tail(self, q, tail)
                            [method] msgin(self, *args)
                                [method] msg(self, level, str, *args)
                            [method] msgout(self, *args)
                                [method] msg(self, level, str, *args)
                            [method] import_module(self, partname, fqname, parent)
                                [method] msgin(self, *args)
                                    [method] msg(self, level, str, *args)
                                [method] msgout(self, *args)
                                    [method] msg(self, level, str, *args)
                                [method] find_module(self, name, path, parent=None)
                                    [method] msgout(self, *args)
                                        [method] msg(self, level, str, *args)
                        [method] ensure_fromlist(self, m, fromlist, recursive=0)
                            [method] msg(self, level, str, *args)
                            [method] find_all_submodules(self, m)
                                [method] msg(self, level, str, *args)
                            [method] import_module(self, partname, fqname, parent)
                                [method] msgin(self, *args)
                                    [method] msg(self, level, str, *args)
                                [method] msgout(self, *args)
                                    [method] msg(self, level, str, *args)
                                [method] find_module(self, name, path, parent=None)
                                    [method] msgout(self, *args)
                                        [method] msg(self, level, str, *args)
                    [method] msg(self, level, str, *args)
                [method] determine_parent(self, caller, level=-1)
                    [method] msgin(self, *args)
                        [method] msg(self, level, str, *args)
                    [method] msgout(self, *args)
                        [method] msg(self, level, str, *args)
            [method] replace_paths_in_code(self, co)
                [method] msgout(self, *args)
                    [method] msg(self, level, str, *args)

----------------------------------------
