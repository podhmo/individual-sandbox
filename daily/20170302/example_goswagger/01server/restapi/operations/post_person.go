package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PostPersonHandlerFunc turns a function with the right signature into a post person handler
type PostPersonHandlerFunc func(PostPersonParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostPersonHandlerFunc) Handle(params PostPersonParams) middleware.Responder {
	return fn(params)
}

// PostPersonHandler interface for that can handle valid post person params
type PostPersonHandler interface {
	Handle(PostPersonParams) middleware.Responder
}

// NewPostPerson creates a new http.Handler for the post person operation
func NewPostPerson(ctx *middleware.Context, handler PostPersonHandler) *PostPerson {
	return &PostPerson{Context: ctx, Handler: handler}
}

/*PostPerson swagger:route POST /person postPerson

create person

*/
type PostPerson struct {
	Context *middleware.Context
	Handler PostPersonHandler
}

func (o *PostPerson) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewPostPersonParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
