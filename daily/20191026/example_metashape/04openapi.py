r"""
generated by json2python-models v0.1.2 at Sat Oct 26 17:37:50 2019
command: $HOME/.cache/pypoetry/virtualenvs/foo-py3.7/bin/json2models -m OpenAPI ../data/swagger.json -s flat
"""
from json_to_models.dynamic_typing import FloatString
from typing import Any, List, Optional, Union


class OpenAPI:
    swagger: FloatString
    info: 'Info'
    host: str
    schemes: List[str]
    base_path: str
    consumes: List[str]
    produces: List[str]
    security_definitions: 'Security'
    security: List['Security']
    paths: 'Path'
    definitions: 'Definition'


class Info:
    title: str
    description: str
    version: str


class Path:
    authtokenobtain: '/auth/token/obtain/_/auth/token/refresh/_/auth/token/verify/'
    authtokenrefresh: '/auth/token/obtain/_/auth/token/refresh/_/auth/token/verify/'
    authtokenverify: '/auth/token/obtain/_/auth/token/refresh/_/auth/token/verify/'
    debug500: '/debug/500/_/debug/echo/_/debug/info/'
    debugecho: '/debug/500/_/debug/echo/_/debug/info/'
    debuginfo: '/debug/500/_/debug/echo/_/debug/info/'
    tests: '/tests/'
    testshash: '/tests/{hash}/_/tests/{testHash}/questions/{id}/_/tests/{testHash}/questions/{questionPk}/answers/{id}/'
    teststest_hashquestions: '/tests/'
    teststest_hashquestionsid: '/tests/{hash}/_/tests/{testHash}/questions/{id}/_/tests/{testHash}/questions/{questionPk}/answers/{id}/'
    teststest_hashquestionsquestion_pkanswers: '/tests/'
    teststest_hashquestionsquestion_pkanswersid: '/tests/{hash}/_/tests/{testHash}/questions/{id}/_/tests/{testHash}/questions/{questionPk}/answers/{id}/'


class Definition:
    token_obtain_pair: 'Answer_Question_Schema_Test_TokenObtainPair_TokenRefresh_TokenVerify'
    token_refresh: 'Answer_Question_Schema_Test_TokenObtainPair_TokenRefresh_TokenVerify'
    token_verify: 'Answer_Question_Schema_Test_TokenObtainPair_TokenRefresh_TokenVerify'
    test_read_only_short: 'Answer_Question_Schema_Test_TokenObtainPair_TokenRefresh_TokenVerify'
    answer: 'Answer_Question_Schema_Test_TokenObtainPair_TokenRefresh_TokenVerify'
    question: 'Answer_Question_Schema_Test_TokenObtainPair_TokenRefresh_TokenVerify'
    test: 'Answer_Question_Schema_Test_TokenObtainPair_TokenRefresh_TokenVerify'
    answer_read_only: 'Answer_Question_Schema_Test_TokenObtainPair_TokenRefresh_TokenVerify'
    question_read_only: 'Answer_Question_Schema_Test_TokenObtainPair_TokenRefresh_TokenVerify'
    test_read_only: 'Answer_Question_Schema_Test_TokenObtainPair_TokenRefresh_TokenVerify'


class authtokenobtain_authtokenrefresh_authtokenverify:
    post: 'Delete_Get_Patch_Post_Put'
    parameters: List[Any]


class Delete_Get_Patch_Post_Put:
    operation_id: str
    description: str
    parameters: List[Union['Parameter', 'ApiKey_Parameter']]
    responses: Union['Response_10O', 'Response', 'Response_10W']
    tags: List[str]


class Parameter:
    name: str
    in_: str
    required: bool
    schema: 'Item_Schema'


class Item_Schema:
    ref: str


class Property:
    username: 'Description_Hash_Id_Item_Owner_Password_Refresh_StatsRestrictionDisplay_Text_Title_Token_Url_Username'
    password: 'Description_Hash_Id_Item_Owner_Password_Refresh_StatsRestrictionDisplay_Text_Title_Token_Url_Username'


class Property_7J:
    refresh: 'Description_Hash_Id_Item_Owner_Password_Refresh_StatsRestrictionDisplay_Text_Title_Token_Url_Username'


class Response:
    two_01: '200_201'


class two_00_201:
    description: str
    schema: Union['Item_Schema', 'Answer_Question_Schema_Test_TokenObtainPair_TokenRefresh_TokenVerify']


class Property_7M:
    token: 'Description_Hash_Id_Item_Owner_Password_Refresh_StatsRestrictionDisplay_Text_Title_Token_Url_Username'


class Property_7P:
    id: 'Description_Hash_Id_Item_Owner_Password_Refresh_StatsRestrictionDisplay_Text_Title_Token_Url_Username'
    url: 'Description_Hash_Id_Item_Owner_Password_Refresh_StatsRestrictionDisplay_Text_Title_Token_Url_Username'
    hash: 'Description_Hash_Id_Item_Owner_Password_Refresh_StatsRestrictionDisplay_Text_Title_Token_Url_Username'
    title: 'Description_Hash_Id_Item_Owner_Password_Refresh_StatsRestrictionDisplay_Text_Title_Token_Url_Username'
    params: 'Answer_Param_Question_Result'
    stats_restriction: 'StatsRestriction'
    owner: 'Description_Hash_Id_Item_Owner_Password_Refresh_StatsRestrictionDisplay_Text_Title_Token_Url_Username'


class Response_10O:
    two_00: Union['two_00_201', '200_204']


class two_00_204:
    description: str


class Security:
    api_key: Optional[Union['ApiKey_Parameter', List[Any]]]
    basic: Optional[Union['Basic_Count', List[Any]]]


class Basic_Count:
    type: str


class Response_10W:
    two_04: 'two_00_204'


class debug500_debugecho_debuginfo:
    get: 'Delete_Get_Patch_Post_Put'
    parameters: List[Any]


class ApiKey_Parameter:
    name: str
    in_: str
    type: str
    description: Optional[str]
    required: Optional[bool]


class tests:
    get: 'Delete_Get_Patch_Post_Put'
    post: 'Delete_Get_Patch_Post_Put'
    parameters: List['ApiKey_Parameter']


class Answer_Question_Schema_Test_TokenObtainPair_TokenRefresh_TokenVerify:
    required: List[str]
    type: str
    properties: Union['Property_7M', 'Property_10S', 'Property', 'Property_10Z', 'Property_11D', 'Property_11C', 'Property_7J', 'Property_7P']


class Property_10S:
    count: 'Basic_Count'
    next: 'Next_Previou'
    previous: 'Next_Previou'
    results: 'Answer_Param_Question_Result'


class Next_Previou:
    type: str
    format: str
    xnullable: bool


class testshash_teststestHashquestionsid_teststestHashquestionsquestionPkanswersid:
    get: 'Delete_Get_Patch_Post_Put'
    put: 'Delete_Get_Patch_Post_Put'
    patch: 'Delete_Get_Patch_Post_Put'
    delete: 'Delete_Get_Patch_Post_Put'
    parameters: List['ApiKey_Parameter']


class Answer_Param_Question_Result:
    type: str
    items: Union['Description_Hash_Id_Item_Owner_Password_Refresh_StatsRestrictionDisplay_Text_Title_Token_Url_Username', 'Item_Schema', 'IsPrivate_Item_Owner']


class Description_Hash_Id_Item_Owner_Password_Refresh_StatsRestrictionDisplay_Text_Title_Token_Url_Username:
    title: str
    type: str
    read_only: Optional[bool]
    min_length: Optional[int]
    max_length: Optional[int]
    format: Optional[str]


class StatsRestriction:
    title: str
    type: str
    enum: List[str]


class Property_10Z:
    id: 'Description_Hash_Id_Item_Owner_Password_Refresh_StatsRestrictionDisplay_Text_Title_Token_Url_Username'
    position: 'Position'
    params_value: 'Answer_Param_Question_Result'


class Position:
    title: str
    type: str
    maximum: int
    minimum: int


class IsPrivate_Item_Owner:
    title: str
    type: str


class Property_11C:
    id: 'Description_Hash_Id_Item_Owner_Password_Refresh_StatsRestrictionDisplay_Text_Title_Token_Url_Username'
    position: 'Position'
    text: 'Description_Hash_Id_Item_Owner_Password_Refresh_StatsRestrictionDisplay_Text_Title_Token_Url_Username'
    answers: Union['Answer_Question', 'Answer_Param_Question_Result']


class Property_11D:
    id: 'Description_Hash_Id_Item_Owner_Password_Refresh_StatsRestrictionDisplay_Text_Title_Token_Url_Username'
    hash: 'Description_Hash_Id_Item_Owner_Password_Refresh_StatsRestrictionDisplay_Text_Title_Token_Url_Username'
    title: 'Description_Hash_Id_Item_Owner_Password_Refresh_StatsRestrictionDisplay_Text_Title_Token_Url_Username'
    description: 'Description_Hash_Id_Item_Owner_Password_Refresh_StatsRestrictionDisplay_Text_Title_Token_Url_Username'
    is_private: 'IsPrivate_Item_Owner'
    params: 'Answer_Param_Question_Result'
    params_defaults: 'Answer_Param_Question_Result'
    stats_restriction: 'StatsRestriction'
    stats_restriction_display: 'Description_Hash_Id_Item_Owner_Password_Refresh_StatsRestrictionDisplay_Text_Title_Token_Url_Username'
    owner: Union['IsPrivate_Item_Owner', 'Description_Hash_Id_Item_Owner_Password_Refresh_StatsRestrictionDisplay_Text_Title_Token_Url_Username']
    questions: Union['Answer_Question', 'Answer_Param_Question_Result']


class Answer_Question:
    type: str
    items: 'Item_Schema'
    read_only: bool

