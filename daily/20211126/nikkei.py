import re
from typing import List, Dict


# https://indexes.nikkei.co.jp/nkave/archives/data?list=annually
# ※指数値は日々の終値ベースです。
# 2021/11/26

def _parse(source:str,*, _rx=re.compile(r"\s+")) -> List[Dict]:
    xs = source.strip().split("\n")
    header = [name.strip() for name in _rx.split(xs[0])]
    return [{k: float(v.replace(",","")) for k,v in zip(header, _rx.split(row))} for row in xs[1:]]

_source = """
年 	始値 	高値 	安値 	終値
1949 	176.21 	176.89 	98.50 	109.91
1950 	108.56 	114.99 	85.25 	101.91
1951 	102.10 	170.32 	102.10 	166.06
1952 	167.80 	370.55 	167.80 	362.64
1953 	364.89 	474.43 	295.18 	377.95
1954 	362.88 	377.27 	314.08 	356.09
1955 	361.10 	425.69 	345.89 	425.69
1956 	428.59 	566.30 	420.14 	549.14
1957 	549.45 	595.46 	471.53 	474.55
1958 	475.20 	666.54 	475.20 	666.54
1959 	671.28 	976.93 	664.69 	874.88
1960 	869.34 	1,356.71 	869.34 	1,356.71
1961 	1,366.74 	1,829.74 	1,258.00 	1,432.60
1962 	1,425.30 	1,589.76 	1,216.04 	1,420.43
1963 	1,418.25 	1,634.37 	1,200.64 	1,225.10
1964 	1,204.40 	1,369.00 	1,202.69 	1,216.55
1965 	1,227.11 	1,417.83 	1,020.49 	1,417.83
1966 	1,430.13 	1,588.73 	1,364.34 	1,452.10
1967 	1,441.35 	1,506.27 	1,250.14 	1,283.47
1968 	1,266.27 	1,851.49 	1,266.27 	1,714.89
1969 	1,733.64 	2,358.96 	1,733.64 	2,358.96
1970 	2,402.85 	2,534.45 	1,929.64 	1,987.14
1971 	2,001.34 	2,740.98 	1,981.74 	2,713.74
1972 	2,712.31 	5,207.94 	2,712.31 	5,207.94
1973 	5,232.86 	5,359.74 	3,958.57 	4,306.80
1974 	4,259.20 	4,787.54 	3,355.13 	3,817.22
1975 	3,777.40 	4,564.52 	3,627.04 	4,358.60
1976 	4,403.06 	4,990.85 	4,403.06 	4,990.85
1977 	4,998.85 	5,287.65 	4,597.26 	4,865.60
1978 	4,867.91 	6,097.26 	4,867.91 	6,001.85
1979 	6,041.57 	6,590.69 	5,925.87 	6,569.47
1980 	6,560.16 	7,188.28 	6,475.93 	7,116.38
1981 	7,150.95 	8,019.14 	6,956.52 	7,681.84
1982 	7,718.84 	8,026.99 	6,849.78 	8,016.67
1983 	8,021.40 	9,893.82 	7,803.18 	9,893.82
1984 	9,927.11 	11,577.44 	9,703.35 	11,542.60
1985 	11,558.06 	13,128.94 	11,545.16 	13,113.32
1986 	13,136.87 	18,936.24 	12,881.50 	18,701.30
1987 	18,820.55 	26,646.43 	18,544.05 	21,564.00
1988 	21,217.04 	30,159.00 	21,217.04 	30,159.00
1989 	30,243.66 	38,915.87 	30,183.79 	38,915.87
1990 	38,712.88 	38,712.88 	20,221.86 	23,848.71
1991 	24,069.18 	27,146.91 	21,456.76 	22,983.77
1992 	23,801.18 	23,801.18 	14,309.41 	16,924.95
1993 	16,994.08 	21,148.11 	16,078.71 	17,417.24
1994 	17,369.74 	21,552.81 	17,369.74 	19,723.06
1995 	19,684.04 	20,011.76 	14,485.41 	19,868.15
1996 	20,618.00 	22,666.80 	19,161.71 	19,361.35
1997 	19,446.00 	20,681.07 	14,775.22 	15,258.74
1998 	14,956.84 	17,264.34 	12,879.97 	13,842.17
1999 	13,415.89 	18,934.34 	13,232.74 	18,934.34
2000 	19,002.86 	20,833.21 	13,423.21 	13,785.69
2001 	13,691.49 	14,529.41 	9,504.41 	10,542.62
2002 	10,871.49 	11,979.85 	8,303.39 	8,578.95
2003 	8,713.33 	11,161.71 	7,607.88 	10,676.64
2004 	10,825.17 	12,163.89 	10,365.40 	11,488.76
2005 	11,517.75 	16,344.20 	10,825.39 	16,111.43
2006 	16,361.54 	17,563.37 	14,218.60 	17,225.83
2007 	17,353.67 	18,261.98 	14,837.66 	15,307.78
2008 	14,691.41 	14,691.41 	7,162.90 	8,859.56
2009 	9,043.12 	10,639.71 	7,054.98 	10,546.44
2010 	10,654.79 	11,339.30 	8,824.06 	10,228.92
2011 	10,398.10 	10,857.53 	8,160.01 	8,455.35
2012 	8,560.11 	10,395.18 	8,295.63 	10,395.18
2013 	10,688.11 	16,291.31 	10,486.99 	16,291.31
2014 	15,908.88 	17,935.64 	13,910.16 	17,450.77
2015 	17,408.71 	20,868.03 	16,795.96 	19,033.71
2016 	18,450.98 	19,494.53 	14,952.02 	19,114.37
2017 	19,594.16 	22,939.18 	18,335.63 	22,764.94
2018 	23,506.33 	24,270.62 	19,155.74 	20,014.77
2019 	19,561.96 	24,066.12 	19,561.96 	23,656.62
2020 	23,204.86 	27,568.15 	16,552.83 	27,444.17
2021 	27,258.38 	30,670.10 	27,013.25 	28,751.62
"""
source = _parse(_source)

def get_base(start_year:int, n:int, *, k:str="始値", _source:List[Dict]=source) -> List[float]:
    year = float(start_year)
    r = []
    reading = False
    for row in source:
        if row["年"] == year:
            reading = True
        if reading:
            r.append(row[k])
        if len(r) >= n:
            break
    # assert len(r) == n
    return r

if __name__ == "__main__":
    import json
    for row in source:
        print(json.dumps(row, ensure_ascii=False))