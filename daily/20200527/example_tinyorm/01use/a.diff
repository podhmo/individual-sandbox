--- 00use/main.go	2020-05-28 00:54:06.000000000 +0900
+++ 01use/main.go	2020-05-28 00:54:39.000000000 +0900
@@ -3,6 +3,7 @@
 import (
 	"database/sql"
 	"log"
+	"m/miniq"
 	"os"
 	"time"
 
@@ -53,12 +54,11 @@
 
 	b1 := newBook("The Little Go Book", "http://openmymind.net/The-Little-Go-Book")
 	b2 := newBook("An Introduction to Programming in Go", "http://www.golang-book.com/")
-	b3 := newBook("xxx", "zzz")
 
 	// insert
 	{
 		// insert rows - auto increment PKs will be set properly after the insert
-		if err := dbmap.Insert(&b1, &b2, &b3); err != nil {
+		if err := dbmap.Insert(&b1, &b2); err != nil {
 			return errors.Wrap(err, "Insert failed")
 		}
 	}
@@ -66,11 +66,11 @@
 	// fetch one
 	{
 		var book Book
-		err := dbmap.SelectOne(
-			&book,
-			"select * from Book where bookId = ?",
-			b2.BookID,
-		)
+		err := miniq.Query(
+			miniq.Select(miniq.STAR),
+			miniq.From(miniq.Table("Book")),
+			miniq.Where(BookID.Compare("= ?", b2.BookID)),
+		).Do(dbmap.SelectOne, &book)
 		if err != nil {
 			return errors.Wrap(err, "SelectOne failed")
 		}
@@ -86,16 +86,17 @@
 			Odd  bool  `db:"odd"`
 		}
 		var rows []Row
-		_, err := dbmap.Select(
-			&rows,
-			`
-select
-  bookId as id,
-  case when bookId % 2 = 0 then 1 else 0 end as even,
-  case when bookId % 2 = 1 then 1 else 0 end as odd
-from Book
-`,
-		)
+
+		_, err := miniq.Query(
+			miniq.Select(
+				BookID.As("id"),
+				miniq.Literalf("case when %s %% 2 = 0 then 1 else 0 end", BookID).As("even"),
+				miniq.Literalf("case when %s %% 2 = 1 then 1 else 0 end", BookID).As("odd"),
+			),
+			miniq.From(miniq.Table("Book")),
+			miniq.Where(),
+		).DoWithValues(dbmap.Select, &rows)
+
 		if err != nil {
 			return errors.Wrap(err, "Select failed")
 		}
@@ -106,6 +107,12 @@
 	return nil
 }
 
+var (
+	BookID    = miniq.Int64Field("bookId")
+	Published = miniq.Int64Field("published")
+	URL       = miniq.StringField("url")
+)
+
 func newBook(title, url string) Book {
 	return Book{
 		Published: time.Now().UnixNano(),
