--- 00use/main.go	2020-05-28 00:54:06.000000000 +0900
+++ 01use/main.go	2020-05-28 05:54:18.000000000 +0900
@@ -3,6 +3,8 @@
 import (
 	"database/sql"
 	"log"
+	"m/miniq"
+	"m/table"
 	"os"
 	"time"
 
@@ -53,12 +55,11 @@
 
 	b1 := newBook("The Little Go Book", "http://openmymind.net/The-Little-Go-Book")
 	b2 := newBook("An Introduction to Programming in Go", "http://www.golang-book.com/")
-	b3 := newBook("xxx", "zzz")
 
 	// insert
 	{
 		// insert rows - auto increment PKs will be set properly after the insert
-		if err := dbmap.Insert(&b1, &b2, &b3); err != nil {
+		if err := dbmap.Insert(&b1, &b2); err != nil {
 			return errors.Wrap(err, "Insert failed")
 		}
 	}
@@ -66,11 +67,11 @@
 	// fetch one
 	{
 		var book Book
-		err := dbmap.SelectOne(
-			&book,
-			"select * from Book where bookId = ?",
-			b2.BookID,
-		)
+		err := table.Book.Query(
+			table.Book.Where(
+				table.Book.BookID.Compare("= ?", b2.BookID),
+			),
+		).Do(dbmap.SelectOne, &book)
 		if err != nil {
 			return errors.Wrap(err, "SelectOne failed")
 		}
@@ -86,16 +87,15 @@
 			Odd  bool  `db:"odd"`
 		}
 		var rows []Row
-		_, err := dbmap.Select(
-			&rows,
-			`
-select
-  bookId as id,
-  case when bookId % 2 = 0 then 1 else 0 end as even,
-  case when bookId % 2 = 1 then 1 else 0 end as odd
-from Book
-`,
-		)
+
+		_, err := table.Book.Query(
+			table.Book.Select(
+				table.Book.BookID.As("id"),
+				miniq.Literalf("case when %s %% 2 = 0 then 1 else 0 end", table.Book.BookID).As("even"),
+				miniq.Literalf("case when %s %% 2 = 1 then 1 else 0 end", table.Book.BookID).As("odd"),
+			),
+		).DoWithValues(dbmap.Select, &rows)
+
 		if err != nil {
 			return errors.Wrap(err, "Select failed")
 		}
