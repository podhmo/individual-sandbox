// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testBooksLogs(t *testing.T) {
	t.Parallel()

	query := BooksLogs()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testBooksLogsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BooksLog{}
	if err = randomize.Struct(seed, o, booksLogDBTypes, true, booksLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BooksLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := BooksLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBooksLogsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BooksLog{}
	if err = randomize.Struct(seed, o, booksLogDBTypes, true, booksLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BooksLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := BooksLogs().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := BooksLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBooksLogsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BooksLog{}
	if err = randomize.Struct(seed, o, booksLogDBTypes, true, booksLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BooksLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BooksLogSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := BooksLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBooksLogsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BooksLog{}
	if err = randomize.Struct(seed, o, booksLogDBTypes, true, booksLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BooksLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := BooksLogExists(ctx, tx, o.BooksLogId)
	if err != nil {
		t.Errorf("Unable to check if BooksLog exists: %s", err)
	}
	if !e {
		t.Errorf("Expected BooksLogExists to return true, but got false.")
	}
}

func testBooksLogsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BooksLog{}
	if err = randomize.Struct(seed, o, booksLogDBTypes, true, booksLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BooksLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	booksLogFound, err := FindBooksLog(ctx, tx, o.BooksLogId)
	if err != nil {
		t.Error(err)
	}

	if booksLogFound == nil {
		t.Error("want a record, got nil")
	}
}

func testBooksLogsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BooksLog{}
	if err = randomize.Struct(seed, o, booksLogDBTypes, true, booksLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BooksLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = BooksLogs().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testBooksLogsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BooksLog{}
	if err = randomize.Struct(seed, o, booksLogDBTypes, true, booksLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BooksLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := BooksLogs().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testBooksLogsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	booksLogOne := &BooksLog{}
	booksLogTwo := &BooksLog{}
	if err = randomize.Struct(seed, booksLogOne, booksLogDBTypes, false, booksLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BooksLog struct: %s", err)
	}
	if err = randomize.Struct(seed, booksLogTwo, booksLogDBTypes, false, booksLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BooksLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = booksLogOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = booksLogTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := BooksLogs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testBooksLogsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	booksLogOne := &BooksLog{}
	booksLogTwo := &BooksLog{}
	if err = randomize.Struct(seed, booksLogOne, booksLogDBTypes, false, booksLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BooksLog struct: %s", err)
	}
	if err = randomize.Struct(seed, booksLogTwo, booksLogDBTypes, false, booksLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BooksLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = booksLogOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = booksLogTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BooksLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func booksLogBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *BooksLog) error {
	*o = BooksLog{}
	return nil
}

func booksLogAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *BooksLog) error {
	*o = BooksLog{}
	return nil
}

func booksLogAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *BooksLog) error {
	*o = BooksLog{}
	return nil
}

func booksLogBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *BooksLog) error {
	*o = BooksLog{}
	return nil
}

func booksLogAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *BooksLog) error {
	*o = BooksLog{}
	return nil
}

func booksLogBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *BooksLog) error {
	*o = BooksLog{}
	return nil
}

func booksLogAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *BooksLog) error {
	*o = BooksLog{}
	return nil
}

func booksLogBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *BooksLog) error {
	*o = BooksLog{}
	return nil
}

func booksLogAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *BooksLog) error {
	*o = BooksLog{}
	return nil
}

func testBooksLogsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &BooksLog{}
	o := &BooksLog{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, booksLogDBTypes, false); err != nil {
		t.Errorf("Unable to randomize BooksLog object: %s", err)
	}

	AddBooksLogHook(boil.BeforeInsertHook, booksLogBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	booksLogBeforeInsertHooks = []BooksLogHook{}

	AddBooksLogHook(boil.AfterInsertHook, booksLogAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	booksLogAfterInsertHooks = []BooksLogHook{}

	AddBooksLogHook(boil.AfterSelectHook, booksLogAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	booksLogAfterSelectHooks = []BooksLogHook{}

	AddBooksLogHook(boil.BeforeUpdateHook, booksLogBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	booksLogBeforeUpdateHooks = []BooksLogHook{}

	AddBooksLogHook(boil.AfterUpdateHook, booksLogAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	booksLogAfterUpdateHooks = []BooksLogHook{}

	AddBooksLogHook(boil.BeforeDeleteHook, booksLogBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	booksLogBeforeDeleteHooks = []BooksLogHook{}

	AddBooksLogHook(boil.AfterDeleteHook, booksLogAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	booksLogAfterDeleteHooks = []BooksLogHook{}

	AddBooksLogHook(boil.BeforeUpsertHook, booksLogBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	booksLogBeforeUpsertHooks = []BooksLogHook{}

	AddBooksLogHook(boil.AfterUpsertHook, booksLogAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	booksLogAfterUpsertHooks = []BooksLogHook{}
}

func testBooksLogsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BooksLog{}
	if err = randomize.Struct(seed, o, booksLogDBTypes, true, booksLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BooksLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BooksLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBooksLogsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BooksLog{}
	if err = randomize.Struct(seed, o, booksLogDBTypes, true); err != nil {
		t.Errorf("Unable to randomize BooksLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(booksLogColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := BooksLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBooksLogToOnePersonUsingAuthorNew(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local BooksLog
	var foreign Person

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, booksLogDBTypes, true, booksLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BooksLog struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, personDBTypes, true, personColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Person struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.AuthorNew, foreign.PeopleId)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.AuthorNew().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.PeopleId, foreign.PeopleId) {
		t.Errorf("want: %v, got %v", foreign.PeopleId, check.PeopleId)
	}

	slice := BooksLogSlice{&local}
	if err = local.L.LoadAuthorNew(ctx, tx, false, (*[]*BooksLog)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.AuthorNew == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.AuthorNew = nil
	if err = local.L.LoadAuthorNew(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.AuthorNew == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testBooksLogToOnePersonUsingAuthorOld(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local BooksLog
	var foreign Person

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, booksLogDBTypes, true, booksLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BooksLog struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, personDBTypes, true, personColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Person struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.AuthorOld, foreign.PeopleId)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.AuthorOld().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.PeopleId, foreign.PeopleId) {
		t.Errorf("want: %v, got %v", foreign.PeopleId, check.PeopleId)
	}

	slice := BooksLogSlice{&local}
	if err = local.L.LoadAuthorOld(ctx, tx, false, (*[]*BooksLog)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.AuthorOld == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.AuthorOld = nil
	if err = local.L.LoadAuthorOld(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.AuthorOld == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testBooksLogToOneBookUsingBookIdNew(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local BooksLog
	var foreign Book

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, booksLogDBTypes, true, booksLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BooksLog struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, bookDBTypes, true, bookColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Book struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.BookIdNew, foreign.BookId)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.BookIdNew().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.BookId, foreign.BookId) {
		t.Errorf("want: %v, got %v", foreign.BookId, check.BookId)
	}

	slice := BooksLogSlice{&local}
	if err = local.L.LoadBookIdNew(ctx, tx, false, (*[]*BooksLog)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.BookIdNew == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.BookIdNew = nil
	if err = local.L.LoadBookIdNew(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.BookIdNew == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testBooksLogToOneBookUsingBookIdOld(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local BooksLog
	var foreign Book

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, booksLogDBTypes, true, booksLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BooksLog struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, bookDBTypes, true, bookColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Book struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.BookIdOld, foreign.BookId)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.BookIdOld().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.BookId, foreign.BookId) {
		t.Errorf("want: %v, got %v", foreign.BookId, check.BookId)
	}

	slice := BooksLogSlice{&local}
	if err = local.L.LoadBookIdOld(ctx, tx, false, (*[]*BooksLog)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.BookIdOld == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.BookIdOld = nil
	if err = local.L.LoadBookIdOld(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.BookIdOld == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testBooksLogToOneSetOpPersonUsingAuthorNew(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a BooksLog
	var b, c Person

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, booksLogDBTypes, false, strmangle.SetComplement(booksLogPrimaryKeyColumns, booksLogColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, personDBTypes, false, strmangle.SetComplement(personPrimaryKeyColumns, personColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, personDBTypes, false, strmangle.SetComplement(personPrimaryKeyColumns, personColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Person{&b, &c} {
		err = a.SetAuthorNew(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.AuthorNew != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.AuthorNewBooksLogs[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.AuthorNew, x.PeopleId) {
			t.Error("foreign key was wrong value", a.AuthorNew)
		}

		zero := reflect.Zero(reflect.TypeOf(a.AuthorNew))
		reflect.Indirect(reflect.ValueOf(&a.AuthorNew)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.AuthorNew, x.PeopleId) {
			t.Error("foreign key was wrong value", a.AuthorNew, x.PeopleId)
		}
	}
}

func testBooksLogToOneRemoveOpPersonUsingAuthorNew(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a BooksLog
	var b Person

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, booksLogDBTypes, false, strmangle.SetComplement(booksLogPrimaryKeyColumns, booksLogColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, personDBTypes, false, strmangle.SetComplement(personPrimaryKeyColumns, personColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetAuthorNew(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveAuthorNew(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.AuthorNew().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.AuthorNew != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.AuthorNew) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.AuthorNewBooksLogs) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testBooksLogToOneSetOpPersonUsingAuthorOld(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a BooksLog
	var b, c Person

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, booksLogDBTypes, false, strmangle.SetComplement(booksLogPrimaryKeyColumns, booksLogColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, personDBTypes, false, strmangle.SetComplement(personPrimaryKeyColumns, personColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, personDBTypes, false, strmangle.SetComplement(personPrimaryKeyColumns, personColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Person{&b, &c} {
		err = a.SetAuthorOld(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.AuthorOld != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.AuthorOldBooksLogs[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.AuthorOld, x.PeopleId) {
			t.Error("foreign key was wrong value", a.AuthorOld)
		}

		zero := reflect.Zero(reflect.TypeOf(a.AuthorOld))
		reflect.Indirect(reflect.ValueOf(&a.AuthorOld)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.AuthorOld, x.PeopleId) {
			t.Error("foreign key was wrong value", a.AuthorOld, x.PeopleId)
		}
	}
}

func testBooksLogToOneRemoveOpPersonUsingAuthorOld(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a BooksLog
	var b Person

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, booksLogDBTypes, false, strmangle.SetComplement(booksLogPrimaryKeyColumns, booksLogColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, personDBTypes, false, strmangle.SetComplement(personPrimaryKeyColumns, personColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetAuthorOld(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveAuthorOld(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.AuthorOld().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.AuthorOld != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.AuthorOld) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.AuthorOldBooksLogs) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testBooksLogToOneSetOpBookUsingBookIdNew(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a BooksLog
	var b, c Book

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, booksLogDBTypes, false, strmangle.SetComplement(booksLogPrimaryKeyColumns, booksLogColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, bookDBTypes, false, strmangle.SetComplement(bookPrimaryKeyColumns, bookColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, bookDBTypes, false, strmangle.SetComplement(bookPrimaryKeyColumns, bookColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Book{&b, &c} {
		err = a.SetBookIdNew(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.BookIdNew != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.BookIdNewBooksLogs[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.BookIdNew, x.BookId) {
			t.Error("foreign key was wrong value", a.BookIdNew)
		}

		zero := reflect.Zero(reflect.TypeOf(a.BookIdNew))
		reflect.Indirect(reflect.ValueOf(&a.BookIdNew)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.BookIdNew, x.BookId) {
			t.Error("foreign key was wrong value", a.BookIdNew, x.BookId)
		}
	}
}

func testBooksLogToOneRemoveOpBookUsingBookIdNew(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a BooksLog
	var b Book

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, booksLogDBTypes, false, strmangle.SetComplement(booksLogPrimaryKeyColumns, booksLogColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, bookDBTypes, false, strmangle.SetComplement(bookPrimaryKeyColumns, bookColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetBookIdNew(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveBookIdNew(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.BookIdNew().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.BookIdNew != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.BookIdNew) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.BookIdNewBooksLogs) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testBooksLogToOneSetOpBookUsingBookIdOld(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a BooksLog
	var b, c Book

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, booksLogDBTypes, false, strmangle.SetComplement(booksLogPrimaryKeyColumns, booksLogColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, bookDBTypes, false, strmangle.SetComplement(bookPrimaryKeyColumns, bookColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, bookDBTypes, false, strmangle.SetComplement(bookPrimaryKeyColumns, bookColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Book{&b, &c} {
		err = a.SetBookIdOld(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.BookIdOld != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.BookIdOldBooksLogs[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.BookIdOld, x.BookId) {
			t.Error("foreign key was wrong value", a.BookIdOld)
		}

		zero := reflect.Zero(reflect.TypeOf(a.BookIdOld))
		reflect.Indirect(reflect.ValueOf(&a.BookIdOld)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.BookIdOld, x.BookId) {
			t.Error("foreign key was wrong value", a.BookIdOld, x.BookId)
		}
	}
}

func testBooksLogToOneRemoveOpBookUsingBookIdOld(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a BooksLog
	var b Book

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, booksLogDBTypes, false, strmangle.SetComplement(booksLogPrimaryKeyColumns, booksLogColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, bookDBTypes, false, strmangle.SetComplement(bookPrimaryKeyColumns, bookColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetBookIdOld(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveBookIdOld(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.BookIdOld().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.BookIdOld != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.BookIdOld) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.BookIdOldBooksLogs) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testBooksLogsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BooksLog{}
	if err = randomize.Struct(seed, o, booksLogDBTypes, true, booksLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BooksLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBooksLogsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BooksLog{}
	if err = randomize.Struct(seed, o, booksLogDBTypes, true, booksLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BooksLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BooksLogSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBooksLogsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BooksLog{}
	if err = randomize.Struct(seed, o, booksLogDBTypes, true, booksLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BooksLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := BooksLogs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	booksLogDBTypes = map[string]string{`BooksLogId`: `INTEGER`, `BookIdNew`: `INTEGER`, `BookIdOld`: `INTEGER`, `TitleNew`: `TEXT`, `TitleOld`: `TEXT`, `AuthorOld`: `INTEGER`, `AuthorNew`: `INTEGER`, `Action`: `TEXT`, `Timestamp`: `DATE`}
	_               = bytes.MinRead
)

func testBooksLogsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(booksLogPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(booksLogAllColumns) == len(booksLogPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &BooksLog{}
	if err = randomize.Struct(seed, o, booksLogDBTypes, true, booksLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BooksLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BooksLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, booksLogDBTypes, true, booksLogPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BooksLog struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testBooksLogsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(booksLogAllColumns) == len(booksLogPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &BooksLog{}
	if err = randomize.Struct(seed, o, booksLogDBTypes, true, booksLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BooksLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BooksLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, booksLogDBTypes, true, booksLogPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BooksLog struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(booksLogAllColumns, booksLogPrimaryKeyColumns) {
		fields = booksLogAllColumns
	} else {
		fields = strmangle.SetComplement(
			booksLogAllColumns,
			booksLogPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := BooksLogSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}
