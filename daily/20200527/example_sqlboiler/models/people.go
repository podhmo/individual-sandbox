// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Person is an object representing the database table.
type Person struct {
	PeopleId null.Int64  `boil:"peopleId" json:"peopleId,omitempty" toml:"peopleId" yaml:"peopleId,omitempty"`
	GN       null.String `boil:"gn" json:"gn,omitempty" toml:"gn" yaml:"gn,omitempty"`
	SN       null.String `boil:"sn" json:"sn,omitempty" toml:"sn" yaml:"sn,omitempty"`
	Birthday null.Time   `boil:"birthday" json:"birthday,omitempty" toml:"birthday" yaml:"birthday,omitempty"`

	R *personR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L personL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PersonColumns = struct {
	PeopleId string
	GN       string
	SN       string
	Birthday string
}{
	PeopleId: "peopleId",
	GN:       "gn",
	SN:       "sn",
	Birthday: "birthday",
}

// Generated where

var PersonWhere = struct {
	PeopleId whereHelpernull_Int64
	GN       whereHelpernull_String
	SN       whereHelpernull_String
	Birthday whereHelpernull_Time
}{
	PeopleId: whereHelpernull_Int64{field: "\"people\".\"peopleId\""},
	GN:       whereHelpernull_String{field: "\"people\".\"gn\""},
	SN:       whereHelpernull_String{field: "\"people\".\"sn\""},
	Birthday: whereHelpernull_Time{field: "\"people\".\"birthday\""},
}

// PersonRels is where relationship names are stored.
var PersonRels = struct {
	AuthorIdBooks         string
	AuthorNewBooksLogs    string
	AuthorOldBooksLogs    string
	PeopleIdNewPeopleLogs string
	PeopleIdOldPeopleLogs string
}{
	AuthorIdBooks:         "AuthorIdBooks",
	AuthorNewBooksLogs:    "AuthorNewBooksLogs",
	AuthorOldBooksLogs:    "AuthorOldBooksLogs",
	PeopleIdNewPeopleLogs: "PeopleIdNewPeopleLogs",
	PeopleIdOldPeopleLogs: "PeopleIdOldPeopleLogs",
}

// personR is where relationships are stored.
type personR struct {
	AuthorIdBooks         BookSlice
	AuthorNewBooksLogs    BooksLogSlice
	AuthorOldBooksLogs    BooksLogSlice
	PeopleIdNewPeopleLogs PeopleLogSlice
	PeopleIdOldPeopleLogs PeopleLogSlice
}

// NewStruct creates a new relationship struct
func (*personR) NewStruct() *personR {
	return &personR{}
}

// personL is where Load methods for each relationship are stored.
type personL struct{}

var (
	personAllColumns            = []string{"peopleId", "gn", "sn", "birthday"}
	personColumnsWithoutDefault = []string{}
	personColumnsWithDefault    = []string{"peopleId", "gn", "sn", "birthday"}
	personPrimaryKeyColumns     = []string{"peopleId"}
)

type (
	// PersonSlice is an alias for a slice of pointers to Person.
	// This should generally be used opposed to []Person.
	PersonSlice []*Person
	// PersonHook is the signature for custom Person hook methods
	PersonHook func(context.Context, boil.ContextExecutor, *Person) error

	personQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	personType                 = reflect.TypeOf(&Person{})
	personMapping              = queries.MakeStructMapping(personType)
	personPrimaryKeyMapping, _ = queries.BindMapping(personType, personMapping, personPrimaryKeyColumns)
	personInsertCacheMut       sync.RWMutex
	personInsertCache          = make(map[string]insertCache)
	personUpdateCacheMut       sync.RWMutex
	personUpdateCache          = make(map[string]updateCache)
	personUpsertCacheMut       sync.RWMutex
	personUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var personBeforeInsertHooks []PersonHook
var personBeforeUpdateHooks []PersonHook
var personBeforeDeleteHooks []PersonHook
var personBeforeUpsertHooks []PersonHook

var personAfterInsertHooks []PersonHook
var personAfterSelectHooks []PersonHook
var personAfterUpdateHooks []PersonHook
var personAfterDeleteHooks []PersonHook
var personAfterUpsertHooks []PersonHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Person) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range personBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Person) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range personBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Person) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range personBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Person) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range personBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Person) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range personAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Person) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range personAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Person) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range personAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Person) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range personAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Person) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range personAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPersonHook registers your hook function for all future operations.
func AddPersonHook(hookPoint boil.HookPoint, personHook PersonHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		personBeforeInsertHooks = append(personBeforeInsertHooks, personHook)
	case boil.BeforeUpdateHook:
		personBeforeUpdateHooks = append(personBeforeUpdateHooks, personHook)
	case boil.BeforeDeleteHook:
		personBeforeDeleteHooks = append(personBeforeDeleteHooks, personHook)
	case boil.BeforeUpsertHook:
		personBeforeUpsertHooks = append(personBeforeUpsertHooks, personHook)
	case boil.AfterInsertHook:
		personAfterInsertHooks = append(personAfterInsertHooks, personHook)
	case boil.AfterSelectHook:
		personAfterSelectHooks = append(personAfterSelectHooks, personHook)
	case boil.AfterUpdateHook:
		personAfterUpdateHooks = append(personAfterUpdateHooks, personHook)
	case boil.AfterDeleteHook:
		personAfterDeleteHooks = append(personAfterDeleteHooks, personHook)
	case boil.AfterUpsertHook:
		personAfterUpsertHooks = append(personAfterUpsertHooks, personHook)
	}
}

// One returns a single person record from the query.
func (q personQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Person, error) {
	o := &Person{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for people")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Person records from the query.
func (q personQuery) All(ctx context.Context, exec boil.ContextExecutor) (PersonSlice, error) {
	var o []*Person

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Person slice")
	}

	if len(personAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Person records in the query.
func (q personQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count people rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q personQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if people exists")
	}

	return count > 0, nil
}

// AuthorIdBooks retrieves all the book's Books with an executor via authorId column.
func (o *Person) AuthorIdBooks(mods ...qm.QueryMod) bookQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"books\".\"authorId\"=?", o.PeopleId),
	)

	query := Books(queryMods...)
	queries.SetFrom(query.Query, "\"books\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"books\".*"})
	}

	return query
}

// AuthorNewBooksLogs retrieves all the booksLog's BooksLogs with an executor via authorNew column.
func (o *Person) AuthorNewBooksLogs(mods ...qm.QueryMod) booksLogQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"booksLog\".\"authorNew\"=?", o.PeopleId),
	)

	query := BooksLogs(queryMods...)
	queries.SetFrom(query.Query, "\"booksLog\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"booksLog\".*"})
	}

	return query
}

// AuthorOldBooksLogs retrieves all the booksLog's BooksLogs with an executor via authorOld column.
func (o *Person) AuthorOldBooksLogs(mods ...qm.QueryMod) booksLogQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"booksLog\".\"authorOld\"=?", o.PeopleId),
	)

	query := BooksLogs(queryMods...)
	queries.SetFrom(query.Query, "\"booksLog\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"booksLog\".*"})
	}

	return query
}

// PeopleIdNewPeopleLogs retrieves all the peopleLog's PeopleLogs with an executor via peopleIdNew column.
func (o *Person) PeopleIdNewPeopleLogs(mods ...qm.QueryMod) peopleLogQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"peopleLog\".\"peopleIdNew\"=?", o.PeopleId),
	)

	query := PeopleLogs(queryMods...)
	queries.SetFrom(query.Query, "\"peopleLog\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"peopleLog\".*"})
	}

	return query
}

// PeopleIdOldPeopleLogs retrieves all the peopleLog's PeopleLogs with an executor via peopleIdOld column.
func (o *Person) PeopleIdOldPeopleLogs(mods ...qm.QueryMod) peopleLogQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"peopleLog\".\"peopleIdOld\"=?", o.PeopleId),
	)

	query := PeopleLogs(queryMods...)
	queries.SetFrom(query.Query, "\"peopleLog\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"peopleLog\".*"})
	}

	return query
}

// LoadAuthorIdBooks allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (personL) LoadAuthorIdBooks(ctx context.Context, e boil.ContextExecutor, singular bool, maybePerson interface{}, mods queries.Applicator) error {
	var slice []*Person
	var object *Person

	if singular {
		object = maybePerson.(*Person)
	} else {
		slice = *maybePerson.(*[]*Person)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &personR{}
		}
		args = append(args, object.PeopleId)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &personR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.PeopleId) {
					continue Outer
				}
			}

			args = append(args, obj.PeopleId)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`books`), qm.WhereIn(`books.authorId in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load books")
	}

	var resultSlice []*Book
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice books")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on books")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for books")
	}

	if len(bookAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AuthorIdBooks = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &bookR{}
			}
			foreign.R.AuthorId = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.PeopleId, foreign.AuthorId) {
				local.R.AuthorIdBooks = append(local.R.AuthorIdBooks, foreign)
				if foreign.R == nil {
					foreign.R = &bookR{}
				}
				foreign.R.AuthorId = local
				break
			}
		}
	}

	return nil
}

// LoadAuthorNewBooksLogs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (personL) LoadAuthorNewBooksLogs(ctx context.Context, e boil.ContextExecutor, singular bool, maybePerson interface{}, mods queries.Applicator) error {
	var slice []*Person
	var object *Person

	if singular {
		object = maybePerson.(*Person)
	} else {
		slice = *maybePerson.(*[]*Person)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &personR{}
		}
		args = append(args, object.PeopleId)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &personR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.PeopleId) {
					continue Outer
				}
			}

			args = append(args, obj.PeopleId)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`booksLog`), qm.WhereIn(`booksLog.authorNew in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load booksLog")
	}

	var resultSlice []*BooksLog
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice booksLog")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on booksLog")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for booksLog")
	}

	if len(booksLogAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AuthorNewBooksLogs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &booksLogR{}
			}
			foreign.R.AuthorNew = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.PeopleId, foreign.AuthorNew) {
				local.R.AuthorNewBooksLogs = append(local.R.AuthorNewBooksLogs, foreign)
				if foreign.R == nil {
					foreign.R = &booksLogR{}
				}
				foreign.R.AuthorNew = local
				break
			}
		}
	}

	return nil
}

// LoadAuthorOldBooksLogs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (personL) LoadAuthorOldBooksLogs(ctx context.Context, e boil.ContextExecutor, singular bool, maybePerson interface{}, mods queries.Applicator) error {
	var slice []*Person
	var object *Person

	if singular {
		object = maybePerson.(*Person)
	} else {
		slice = *maybePerson.(*[]*Person)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &personR{}
		}
		args = append(args, object.PeopleId)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &personR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.PeopleId) {
					continue Outer
				}
			}

			args = append(args, obj.PeopleId)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`booksLog`), qm.WhereIn(`booksLog.authorOld in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load booksLog")
	}

	var resultSlice []*BooksLog
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice booksLog")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on booksLog")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for booksLog")
	}

	if len(booksLogAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AuthorOldBooksLogs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &booksLogR{}
			}
			foreign.R.AuthorOld = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.PeopleId, foreign.AuthorOld) {
				local.R.AuthorOldBooksLogs = append(local.R.AuthorOldBooksLogs, foreign)
				if foreign.R == nil {
					foreign.R = &booksLogR{}
				}
				foreign.R.AuthorOld = local
				break
			}
		}
	}

	return nil
}

// LoadPeopleIdNewPeopleLogs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (personL) LoadPeopleIdNewPeopleLogs(ctx context.Context, e boil.ContextExecutor, singular bool, maybePerson interface{}, mods queries.Applicator) error {
	var slice []*Person
	var object *Person

	if singular {
		object = maybePerson.(*Person)
	} else {
		slice = *maybePerson.(*[]*Person)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &personR{}
		}
		args = append(args, object.PeopleId)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &personR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.PeopleId) {
					continue Outer
				}
			}

			args = append(args, obj.PeopleId)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`peopleLog`), qm.WhereIn(`peopleLog.peopleIdNew in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load peopleLog")
	}

	var resultSlice []*PeopleLog
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice peopleLog")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on peopleLog")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for peopleLog")
	}

	if len(peopleLogAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PeopleIdNewPeopleLogs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &peopleLogR{}
			}
			foreign.R.PeopleIdNew = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.PeopleId, foreign.PeopleIdNew) {
				local.R.PeopleIdNewPeopleLogs = append(local.R.PeopleIdNewPeopleLogs, foreign)
				if foreign.R == nil {
					foreign.R = &peopleLogR{}
				}
				foreign.R.PeopleIdNew = local
				break
			}
		}
	}

	return nil
}

// LoadPeopleIdOldPeopleLogs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (personL) LoadPeopleIdOldPeopleLogs(ctx context.Context, e boil.ContextExecutor, singular bool, maybePerson interface{}, mods queries.Applicator) error {
	var slice []*Person
	var object *Person

	if singular {
		object = maybePerson.(*Person)
	} else {
		slice = *maybePerson.(*[]*Person)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &personR{}
		}
		args = append(args, object.PeopleId)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &personR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.PeopleId) {
					continue Outer
				}
			}

			args = append(args, obj.PeopleId)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`peopleLog`), qm.WhereIn(`peopleLog.peopleIdOld in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load peopleLog")
	}

	var resultSlice []*PeopleLog
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice peopleLog")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on peopleLog")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for peopleLog")
	}

	if len(peopleLogAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PeopleIdOldPeopleLogs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &peopleLogR{}
			}
			foreign.R.PeopleIdOld = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.PeopleId, foreign.PeopleIdOld) {
				local.R.PeopleIdOldPeopleLogs = append(local.R.PeopleIdOldPeopleLogs, foreign)
				if foreign.R == nil {
					foreign.R = &peopleLogR{}
				}
				foreign.R.PeopleIdOld = local
				break
			}
		}
	}

	return nil
}

// AddAuthorIdBooks adds the given related objects to the existing relationships
// of the person, optionally inserting them as new records.
// Appends related to o.R.AuthorIdBooks.
// Sets related.R.AuthorId appropriately.
func (o *Person) AddAuthorIdBooks(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Book) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.AuthorId, o.PeopleId)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"books\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"authorId"}),
				strmangle.WhereClause("\"", "\"", 0, bookPrimaryKeyColumns),
			)
			values := []interface{}{o.PeopleId, rel.BookId}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.AuthorId, o.PeopleId)
		}
	}

	if o.R == nil {
		o.R = &personR{
			AuthorIdBooks: related,
		}
	} else {
		o.R.AuthorIdBooks = append(o.R.AuthorIdBooks, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &bookR{
				AuthorId: o,
			}
		} else {
			rel.R.AuthorId = o
		}
	}
	return nil
}

// SetAuthorIdBooks removes all previously related items of the
// person replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.AuthorId's AuthorIdBooks accordingly.
// Replaces o.R.AuthorIdBooks with related.
// Sets related.R.AuthorId's AuthorIdBooks accordingly.
func (o *Person) SetAuthorIdBooks(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Book) error {
	query := "update \"books\" set \"authorId\" = null where \"authorId\" = ?"
	values := []interface{}{o.PeopleId}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.AuthorIdBooks {
			queries.SetScanner(&rel.AuthorId, nil)
			if rel.R == nil {
				continue
			}

			rel.R.AuthorId = nil
		}

		o.R.AuthorIdBooks = nil
	}
	return o.AddAuthorIdBooks(ctx, exec, insert, related...)
}

// RemoveAuthorIdBooks relationships from objects passed in.
// Removes related items from R.AuthorIdBooks (uses pointer comparison, removal does not keep order)
// Sets related.R.AuthorId.
func (o *Person) RemoveAuthorIdBooks(ctx context.Context, exec boil.ContextExecutor, related ...*Book) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.AuthorId, nil)
		if rel.R != nil {
			rel.R.AuthorId = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("authorId")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.AuthorIdBooks {
			if rel != ri {
				continue
			}

			ln := len(o.R.AuthorIdBooks)
			if ln > 1 && i < ln-1 {
				o.R.AuthorIdBooks[i] = o.R.AuthorIdBooks[ln-1]
			}
			o.R.AuthorIdBooks = o.R.AuthorIdBooks[:ln-1]
			break
		}
	}

	return nil
}

// AddAuthorNewBooksLogs adds the given related objects to the existing relationships
// of the person, optionally inserting them as new records.
// Appends related to o.R.AuthorNewBooksLogs.
// Sets related.R.AuthorNew appropriately.
func (o *Person) AddAuthorNewBooksLogs(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*BooksLog) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.AuthorNew, o.PeopleId)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"booksLog\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"authorNew"}),
				strmangle.WhereClause("\"", "\"", 0, booksLogPrimaryKeyColumns),
			)
			values := []interface{}{o.PeopleId, rel.BooksLogId}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.AuthorNew, o.PeopleId)
		}
	}

	if o.R == nil {
		o.R = &personR{
			AuthorNewBooksLogs: related,
		}
	} else {
		o.R.AuthorNewBooksLogs = append(o.R.AuthorNewBooksLogs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &booksLogR{
				AuthorNew: o,
			}
		} else {
			rel.R.AuthorNew = o
		}
	}
	return nil
}

// SetAuthorNewBooksLogs removes all previously related items of the
// person replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.AuthorNew's AuthorNewBooksLogs accordingly.
// Replaces o.R.AuthorNewBooksLogs with related.
// Sets related.R.AuthorNew's AuthorNewBooksLogs accordingly.
func (o *Person) SetAuthorNewBooksLogs(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*BooksLog) error {
	query := "update \"booksLog\" set \"authorNew\" = null where \"authorNew\" = ?"
	values := []interface{}{o.PeopleId}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.AuthorNewBooksLogs {
			queries.SetScanner(&rel.AuthorNew, nil)
			if rel.R == nil {
				continue
			}

			rel.R.AuthorNew = nil
		}

		o.R.AuthorNewBooksLogs = nil
	}
	return o.AddAuthorNewBooksLogs(ctx, exec, insert, related...)
}

// RemoveAuthorNewBooksLogs relationships from objects passed in.
// Removes related items from R.AuthorNewBooksLogs (uses pointer comparison, removal does not keep order)
// Sets related.R.AuthorNew.
func (o *Person) RemoveAuthorNewBooksLogs(ctx context.Context, exec boil.ContextExecutor, related ...*BooksLog) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.AuthorNew, nil)
		if rel.R != nil {
			rel.R.AuthorNew = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("authorNew")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.AuthorNewBooksLogs {
			if rel != ri {
				continue
			}

			ln := len(o.R.AuthorNewBooksLogs)
			if ln > 1 && i < ln-1 {
				o.R.AuthorNewBooksLogs[i] = o.R.AuthorNewBooksLogs[ln-1]
			}
			o.R.AuthorNewBooksLogs = o.R.AuthorNewBooksLogs[:ln-1]
			break
		}
	}

	return nil
}

// AddAuthorOldBooksLogs adds the given related objects to the existing relationships
// of the person, optionally inserting them as new records.
// Appends related to o.R.AuthorOldBooksLogs.
// Sets related.R.AuthorOld appropriately.
func (o *Person) AddAuthorOldBooksLogs(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*BooksLog) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.AuthorOld, o.PeopleId)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"booksLog\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"authorOld"}),
				strmangle.WhereClause("\"", "\"", 0, booksLogPrimaryKeyColumns),
			)
			values := []interface{}{o.PeopleId, rel.BooksLogId}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.AuthorOld, o.PeopleId)
		}
	}

	if o.R == nil {
		o.R = &personR{
			AuthorOldBooksLogs: related,
		}
	} else {
		o.R.AuthorOldBooksLogs = append(o.R.AuthorOldBooksLogs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &booksLogR{
				AuthorOld: o,
			}
		} else {
			rel.R.AuthorOld = o
		}
	}
	return nil
}

// SetAuthorOldBooksLogs removes all previously related items of the
// person replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.AuthorOld's AuthorOldBooksLogs accordingly.
// Replaces o.R.AuthorOldBooksLogs with related.
// Sets related.R.AuthorOld's AuthorOldBooksLogs accordingly.
func (o *Person) SetAuthorOldBooksLogs(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*BooksLog) error {
	query := "update \"booksLog\" set \"authorOld\" = null where \"authorOld\" = ?"
	values := []interface{}{o.PeopleId}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.AuthorOldBooksLogs {
			queries.SetScanner(&rel.AuthorOld, nil)
			if rel.R == nil {
				continue
			}

			rel.R.AuthorOld = nil
		}

		o.R.AuthorOldBooksLogs = nil
	}
	return o.AddAuthorOldBooksLogs(ctx, exec, insert, related...)
}

// RemoveAuthorOldBooksLogs relationships from objects passed in.
// Removes related items from R.AuthorOldBooksLogs (uses pointer comparison, removal does not keep order)
// Sets related.R.AuthorOld.
func (o *Person) RemoveAuthorOldBooksLogs(ctx context.Context, exec boil.ContextExecutor, related ...*BooksLog) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.AuthorOld, nil)
		if rel.R != nil {
			rel.R.AuthorOld = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("authorOld")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.AuthorOldBooksLogs {
			if rel != ri {
				continue
			}

			ln := len(o.R.AuthorOldBooksLogs)
			if ln > 1 && i < ln-1 {
				o.R.AuthorOldBooksLogs[i] = o.R.AuthorOldBooksLogs[ln-1]
			}
			o.R.AuthorOldBooksLogs = o.R.AuthorOldBooksLogs[:ln-1]
			break
		}
	}

	return nil
}

// AddPeopleIdNewPeopleLogs adds the given related objects to the existing relationships
// of the person, optionally inserting them as new records.
// Appends related to o.R.PeopleIdNewPeopleLogs.
// Sets related.R.PeopleIdNew appropriately.
func (o *Person) AddPeopleIdNewPeopleLogs(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PeopleLog) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.PeopleIdNew, o.PeopleId)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"peopleLog\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"peopleIdNew"}),
				strmangle.WhereClause("\"", "\"", 0, peopleLogPrimaryKeyColumns),
			)
			values := []interface{}{o.PeopleId, rel.PeopleLogId}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.PeopleIdNew, o.PeopleId)
		}
	}

	if o.R == nil {
		o.R = &personR{
			PeopleIdNewPeopleLogs: related,
		}
	} else {
		o.R.PeopleIdNewPeopleLogs = append(o.R.PeopleIdNewPeopleLogs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &peopleLogR{
				PeopleIdNew: o,
			}
		} else {
			rel.R.PeopleIdNew = o
		}
	}
	return nil
}

// SetPeopleIdNewPeopleLogs removes all previously related items of the
// person replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.PeopleIdNew's PeopleIdNewPeopleLogs accordingly.
// Replaces o.R.PeopleIdNewPeopleLogs with related.
// Sets related.R.PeopleIdNew's PeopleIdNewPeopleLogs accordingly.
func (o *Person) SetPeopleIdNewPeopleLogs(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PeopleLog) error {
	query := "update \"peopleLog\" set \"peopleIdNew\" = null where \"peopleIdNew\" = ?"
	values := []interface{}{o.PeopleId}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.PeopleIdNewPeopleLogs {
			queries.SetScanner(&rel.PeopleIdNew, nil)
			if rel.R == nil {
				continue
			}

			rel.R.PeopleIdNew = nil
		}

		o.R.PeopleIdNewPeopleLogs = nil
	}
	return o.AddPeopleIdNewPeopleLogs(ctx, exec, insert, related...)
}

// RemovePeopleIdNewPeopleLogs relationships from objects passed in.
// Removes related items from R.PeopleIdNewPeopleLogs (uses pointer comparison, removal does not keep order)
// Sets related.R.PeopleIdNew.
func (o *Person) RemovePeopleIdNewPeopleLogs(ctx context.Context, exec boil.ContextExecutor, related ...*PeopleLog) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.PeopleIdNew, nil)
		if rel.R != nil {
			rel.R.PeopleIdNew = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("peopleIdNew")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.PeopleIdNewPeopleLogs {
			if rel != ri {
				continue
			}

			ln := len(o.R.PeopleIdNewPeopleLogs)
			if ln > 1 && i < ln-1 {
				o.R.PeopleIdNewPeopleLogs[i] = o.R.PeopleIdNewPeopleLogs[ln-1]
			}
			o.R.PeopleIdNewPeopleLogs = o.R.PeopleIdNewPeopleLogs[:ln-1]
			break
		}
	}

	return nil
}

// AddPeopleIdOldPeopleLogs adds the given related objects to the existing relationships
// of the person, optionally inserting them as new records.
// Appends related to o.R.PeopleIdOldPeopleLogs.
// Sets related.R.PeopleIdOld appropriately.
func (o *Person) AddPeopleIdOldPeopleLogs(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PeopleLog) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.PeopleIdOld, o.PeopleId)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"peopleLog\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"peopleIdOld"}),
				strmangle.WhereClause("\"", "\"", 0, peopleLogPrimaryKeyColumns),
			)
			values := []interface{}{o.PeopleId, rel.PeopleLogId}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.PeopleIdOld, o.PeopleId)
		}
	}

	if o.R == nil {
		o.R = &personR{
			PeopleIdOldPeopleLogs: related,
		}
	} else {
		o.R.PeopleIdOldPeopleLogs = append(o.R.PeopleIdOldPeopleLogs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &peopleLogR{
				PeopleIdOld: o,
			}
		} else {
			rel.R.PeopleIdOld = o
		}
	}
	return nil
}

// SetPeopleIdOldPeopleLogs removes all previously related items of the
// person replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.PeopleIdOld's PeopleIdOldPeopleLogs accordingly.
// Replaces o.R.PeopleIdOldPeopleLogs with related.
// Sets related.R.PeopleIdOld's PeopleIdOldPeopleLogs accordingly.
func (o *Person) SetPeopleIdOldPeopleLogs(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PeopleLog) error {
	query := "update \"peopleLog\" set \"peopleIdOld\" = null where \"peopleIdOld\" = ?"
	values := []interface{}{o.PeopleId}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.PeopleIdOldPeopleLogs {
			queries.SetScanner(&rel.PeopleIdOld, nil)
			if rel.R == nil {
				continue
			}

			rel.R.PeopleIdOld = nil
		}

		o.R.PeopleIdOldPeopleLogs = nil
	}
	return o.AddPeopleIdOldPeopleLogs(ctx, exec, insert, related...)
}

// RemovePeopleIdOldPeopleLogs relationships from objects passed in.
// Removes related items from R.PeopleIdOldPeopleLogs (uses pointer comparison, removal does not keep order)
// Sets related.R.PeopleIdOld.
func (o *Person) RemovePeopleIdOldPeopleLogs(ctx context.Context, exec boil.ContextExecutor, related ...*PeopleLog) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.PeopleIdOld, nil)
		if rel.R != nil {
			rel.R.PeopleIdOld = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("peopleIdOld")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.PeopleIdOldPeopleLogs {
			if rel != ri {
				continue
			}

			ln := len(o.R.PeopleIdOldPeopleLogs)
			if ln > 1 && i < ln-1 {
				o.R.PeopleIdOldPeopleLogs[i] = o.R.PeopleIdOldPeopleLogs[ln-1]
			}
			o.R.PeopleIdOldPeopleLogs = o.R.PeopleIdOldPeopleLogs[:ln-1]
			break
		}
	}

	return nil
}

// People retrieves all the records using an executor.
func People(mods ...qm.QueryMod) personQuery {
	mods = append(mods, qm.From("\"people\""))
	return personQuery{NewQuery(mods...)}
}

// FindPerson retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPerson(ctx context.Context, exec boil.ContextExecutor, peopleId null.Int64, selectCols ...string) (*Person, error) {
	personObj := &Person{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"people\" where \"peopleId\"=?", sel,
	)

	q := queries.Raw(query, peopleId)

	err := q.Bind(ctx, exec, personObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from people")
	}

	return personObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Person) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no people provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(personColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	personInsertCacheMut.RLock()
	cache, cached := personInsertCache[key]
	personInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			personAllColumns,
			personColumnsWithDefault,
			personColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(personType, personMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(personType, personMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"people\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"people\" () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT \"%s\" FROM \"people\" WHERE %s", strings.Join(returnColumns, "\",\""), strmangle.WhereClause("\"", "\"", 0, personPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into people")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.PeopleId,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for people")
	}

CacheNoHooks:
	if !cached {
		personInsertCacheMut.Lock()
		personInsertCache[key] = cache
		personInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Person.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Person) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	personUpdateCacheMut.RLock()
	cache, cached := personUpdateCache[key]
	personUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			personAllColumns,
			personPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update people, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"people\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, personPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(personType, personMapping, append(wl, personPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update people row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for people")
	}

	if !cached {
		personUpdateCacheMut.Lock()
		personUpdateCache[key] = cache
		personUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q personQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for people")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for people")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PersonSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), personPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"people\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, personPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in person slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all person")
	}
	return rowsAff, nil
}

// Delete deletes a single Person record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Person) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Person provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), personPrimaryKeyMapping)
	sql := "DELETE FROM \"people\" WHERE \"peopleId\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from people")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for people")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q personQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no personQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from people")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for people")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PersonSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(personBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), personPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"people\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, personPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from person slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for people")
	}

	if len(personAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Person) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPerson(ctx, exec, o.PeopleId)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PersonSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PersonSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), personPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"people\".* FROM \"people\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, personPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PersonSlice")
	}

	*o = slice

	return nil
}

// PersonExists checks if the Person row exists.
func PersonExists(ctx context.Context, exec boil.ContextExecutor, peopleId null.Int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"people\" where \"peopleId\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, peopleId)
	}
	row := exec.QueryRowContext(ctx, sql, peopleId)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if people exists")
	}

	return exists, nil
}
