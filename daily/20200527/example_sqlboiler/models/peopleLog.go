// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// PeopleLog is an object representing the database table.
type PeopleLog struct {
	PeopleLogId null.Int64  `boil:"peopleLogId" json:"peopleLogId,omitempty" toml:"peopleLogId" yaml:"peopleLogId,omitempty"`
	PeopleIdNew null.Int64  `boil:"peopleIdNew" json:"peopleIdNew,omitempty" toml:"peopleIdNew" yaml:"peopleIdNew,omitempty"`
	PeopleIdOld null.Int64  `boil:"peopleIdOld" json:"peopleIdOld,omitempty" toml:"peopleIdOld" yaml:"peopleIdOld,omitempty"`
	GnNew       null.String `boil:"gnNew" json:"gnNew,omitempty" toml:"gnNew" yaml:"gnNew,omitempty"`
	GNOLD       null.String `boil:"gnOld" json:"gnOld,omitempty" toml:"gnOld" yaml:"gnOld,omitempty"`
	SnNew       null.String `boil:"snNew" json:"snNew,omitempty" toml:"snNew" yaml:"snNew,omitempty"`
	SNOLD       null.String `boil:"snOld" json:"snOld,omitempty" toml:"snOld" yaml:"snOld,omitempty"`
	BirthdayNew null.Time   `boil:"birthdayNew" json:"birthdayNew,omitempty" toml:"birthdayNew" yaml:"birthdayNew,omitempty"`
	BirthdayOld null.Time   `boil:"birthdayOld" json:"birthdayOld,omitempty" toml:"birthdayOld" yaml:"birthdayOld,omitempty"`
	Action      null.String `boil:"action" json:"action,omitempty" toml:"action" yaml:"action,omitempty"`
	Timestamp   null.Time   `boil:"timestamp" json:"timestamp,omitempty" toml:"timestamp" yaml:"timestamp,omitempty"`

	R *peopleLogR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L peopleLogL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PeopleLogColumns = struct {
	PeopleLogId string
	PeopleIdNew string
	PeopleIdOld string
	GnNew       string
	GNOLD       string
	SnNew       string
	SNOLD       string
	BirthdayNew string
	BirthdayOld string
	Action      string
	Timestamp   string
}{
	PeopleLogId: "peopleLogId",
	PeopleIdNew: "peopleIdNew",
	PeopleIdOld: "peopleIdOld",
	GnNew:       "gnNew",
	GNOLD:       "gnOld",
	SnNew:       "snNew",
	SNOLD:       "snOld",
	BirthdayNew: "birthdayNew",
	BirthdayOld: "birthdayOld",
	Action:      "action",
	Timestamp:   "timestamp",
}

// Generated where

var PeopleLogWhere = struct {
	PeopleLogId whereHelpernull_Int64
	PeopleIdNew whereHelpernull_Int64
	PeopleIdOld whereHelpernull_Int64
	GnNew       whereHelpernull_String
	GNOLD       whereHelpernull_String
	SnNew       whereHelpernull_String
	SNOLD       whereHelpernull_String
	BirthdayNew whereHelpernull_Time
	BirthdayOld whereHelpernull_Time
	Action      whereHelpernull_String
	Timestamp   whereHelpernull_Time
}{
	PeopleLogId: whereHelpernull_Int64{field: "\"peopleLog\".\"peopleLogId\""},
	PeopleIdNew: whereHelpernull_Int64{field: "\"peopleLog\".\"peopleIdNew\""},
	PeopleIdOld: whereHelpernull_Int64{field: "\"peopleLog\".\"peopleIdOld\""},
	GnNew:       whereHelpernull_String{field: "\"peopleLog\".\"gnNew\""},
	GNOLD:       whereHelpernull_String{field: "\"peopleLog\".\"gnOld\""},
	SnNew:       whereHelpernull_String{field: "\"peopleLog\".\"snNew\""},
	SNOLD:       whereHelpernull_String{field: "\"peopleLog\".\"snOld\""},
	BirthdayNew: whereHelpernull_Time{field: "\"peopleLog\".\"birthdayNew\""},
	BirthdayOld: whereHelpernull_Time{field: "\"peopleLog\".\"birthdayOld\""},
	Action:      whereHelpernull_String{field: "\"peopleLog\".\"action\""},
	Timestamp:   whereHelpernull_Time{field: "\"peopleLog\".\"timestamp\""},
}

// PeopleLogRels is where relationship names are stored.
var PeopleLogRels = struct {
	PeopleIdNew string
	PeopleIdOld string
}{
	PeopleIdNew: "PeopleIdNew",
	PeopleIdOld: "PeopleIdOld",
}

// peopleLogR is where relationships are stored.
type peopleLogR struct {
	PeopleIdNew *Person
	PeopleIdOld *Person
}

// NewStruct creates a new relationship struct
func (*peopleLogR) NewStruct() *peopleLogR {
	return &peopleLogR{}
}

// peopleLogL is where Load methods for each relationship are stored.
type peopleLogL struct{}

var (
	peopleLogAllColumns            = []string{"peopleLogId", "peopleIdNew", "peopleIdOld", "gnNew", "gnOld", "snNew", "snOld", "birthdayNew", "birthdayOld", "action", "timestamp"}
	peopleLogColumnsWithoutDefault = []string{}
	peopleLogColumnsWithDefault    = []string{"peopleLogId", "peopleIdNew", "peopleIdOld", "gnNew", "gnOld", "snNew", "snOld", "birthdayNew", "birthdayOld", "action", "timestamp"}
	peopleLogPrimaryKeyColumns     = []string{"peopleLogId"}
)

type (
	// PeopleLogSlice is an alias for a slice of pointers to PeopleLog.
	// This should generally be used opposed to []PeopleLog.
	PeopleLogSlice []*PeopleLog
	// PeopleLogHook is the signature for custom PeopleLog hook methods
	PeopleLogHook func(context.Context, boil.ContextExecutor, *PeopleLog) error

	peopleLogQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	peopleLogType                 = reflect.TypeOf(&PeopleLog{})
	peopleLogMapping              = queries.MakeStructMapping(peopleLogType)
	peopleLogPrimaryKeyMapping, _ = queries.BindMapping(peopleLogType, peopleLogMapping, peopleLogPrimaryKeyColumns)
	peopleLogInsertCacheMut       sync.RWMutex
	peopleLogInsertCache          = make(map[string]insertCache)
	peopleLogUpdateCacheMut       sync.RWMutex
	peopleLogUpdateCache          = make(map[string]updateCache)
	peopleLogUpsertCacheMut       sync.RWMutex
	peopleLogUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var peopleLogBeforeInsertHooks []PeopleLogHook
var peopleLogBeforeUpdateHooks []PeopleLogHook
var peopleLogBeforeDeleteHooks []PeopleLogHook
var peopleLogBeforeUpsertHooks []PeopleLogHook

var peopleLogAfterInsertHooks []PeopleLogHook
var peopleLogAfterSelectHooks []PeopleLogHook
var peopleLogAfterUpdateHooks []PeopleLogHook
var peopleLogAfterDeleteHooks []PeopleLogHook
var peopleLogAfterUpsertHooks []PeopleLogHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PeopleLog) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range peopleLogBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PeopleLog) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range peopleLogBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PeopleLog) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range peopleLogBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PeopleLog) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range peopleLogBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PeopleLog) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range peopleLogAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PeopleLog) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range peopleLogAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PeopleLog) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range peopleLogAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PeopleLog) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range peopleLogAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PeopleLog) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range peopleLogAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPeopleLogHook registers your hook function for all future operations.
func AddPeopleLogHook(hookPoint boil.HookPoint, peopleLogHook PeopleLogHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		peopleLogBeforeInsertHooks = append(peopleLogBeforeInsertHooks, peopleLogHook)
	case boil.BeforeUpdateHook:
		peopleLogBeforeUpdateHooks = append(peopleLogBeforeUpdateHooks, peopleLogHook)
	case boil.BeforeDeleteHook:
		peopleLogBeforeDeleteHooks = append(peopleLogBeforeDeleteHooks, peopleLogHook)
	case boil.BeforeUpsertHook:
		peopleLogBeforeUpsertHooks = append(peopleLogBeforeUpsertHooks, peopleLogHook)
	case boil.AfterInsertHook:
		peopleLogAfterInsertHooks = append(peopleLogAfterInsertHooks, peopleLogHook)
	case boil.AfterSelectHook:
		peopleLogAfterSelectHooks = append(peopleLogAfterSelectHooks, peopleLogHook)
	case boil.AfterUpdateHook:
		peopleLogAfterUpdateHooks = append(peopleLogAfterUpdateHooks, peopleLogHook)
	case boil.AfterDeleteHook:
		peopleLogAfterDeleteHooks = append(peopleLogAfterDeleteHooks, peopleLogHook)
	case boil.AfterUpsertHook:
		peopleLogAfterUpsertHooks = append(peopleLogAfterUpsertHooks, peopleLogHook)
	}
}

// One returns a single peopleLog record from the query.
func (q peopleLogQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PeopleLog, error) {
	o := &PeopleLog{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for peopleLog")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PeopleLog records from the query.
func (q peopleLogQuery) All(ctx context.Context, exec boil.ContextExecutor) (PeopleLogSlice, error) {
	var o []*PeopleLog

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PeopleLog slice")
	}

	if len(peopleLogAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PeopleLog records in the query.
func (q peopleLogQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count peopleLog rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q peopleLogQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if peopleLog exists")
	}

	return count > 0, nil
}

// PeopleIdNew pointed to by the foreign key.
func (o *PeopleLog) PeopleIdNew(mods ...qm.QueryMod) personQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"peopleId\" = ?", o.PeopleIdNew),
	}

	queryMods = append(queryMods, mods...)

	query := People(queryMods...)
	queries.SetFrom(query.Query, "\"people\"")

	return query
}

// PeopleIdOld pointed to by the foreign key.
func (o *PeopleLog) PeopleIdOld(mods ...qm.QueryMod) personQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"peopleId\" = ?", o.PeopleIdOld),
	}

	queryMods = append(queryMods, mods...)

	query := People(queryMods...)
	queries.SetFrom(query.Query, "\"people\"")

	return query
}

// LoadPeopleIdNew allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (peopleLogL) LoadPeopleIdNew(ctx context.Context, e boil.ContextExecutor, singular bool, maybePeopleLog interface{}, mods queries.Applicator) error {
	var slice []*PeopleLog
	var object *PeopleLog

	if singular {
		object = maybePeopleLog.(*PeopleLog)
	} else {
		slice = *maybePeopleLog.(*[]*PeopleLog)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &peopleLogR{}
		}
		if !queries.IsNil(object.PeopleIdNew) {
			args = append(args, object.PeopleIdNew)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &peopleLogR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.PeopleIdNew) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.PeopleIdNew) {
				args = append(args, obj.PeopleIdNew)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`people`), qm.WhereIn(`people.peopleId in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Person")
	}

	var resultSlice []*Person
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Person")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for people")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for people")
	}

	if len(peopleLogAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PeopleIdNew = foreign
		if foreign.R == nil {
			foreign.R = &personR{}
		}
		foreign.R.PeopleIdNewPeopleLogs = append(foreign.R.PeopleIdNewPeopleLogs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.PeopleIdNew, foreign.PeopleId) {
				local.R.PeopleIdNew = foreign
				if foreign.R == nil {
					foreign.R = &personR{}
				}
				foreign.R.PeopleIdNewPeopleLogs = append(foreign.R.PeopleIdNewPeopleLogs, local)
				break
			}
		}
	}

	return nil
}

// LoadPeopleIdOld allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (peopleLogL) LoadPeopleIdOld(ctx context.Context, e boil.ContextExecutor, singular bool, maybePeopleLog interface{}, mods queries.Applicator) error {
	var slice []*PeopleLog
	var object *PeopleLog

	if singular {
		object = maybePeopleLog.(*PeopleLog)
	} else {
		slice = *maybePeopleLog.(*[]*PeopleLog)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &peopleLogR{}
		}
		if !queries.IsNil(object.PeopleIdOld) {
			args = append(args, object.PeopleIdOld)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &peopleLogR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.PeopleIdOld) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.PeopleIdOld) {
				args = append(args, obj.PeopleIdOld)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`people`), qm.WhereIn(`people.peopleId in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Person")
	}

	var resultSlice []*Person
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Person")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for people")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for people")
	}

	if len(peopleLogAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PeopleIdOld = foreign
		if foreign.R == nil {
			foreign.R = &personR{}
		}
		foreign.R.PeopleIdOldPeopleLogs = append(foreign.R.PeopleIdOldPeopleLogs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.PeopleIdOld, foreign.PeopleId) {
				local.R.PeopleIdOld = foreign
				if foreign.R == nil {
					foreign.R = &personR{}
				}
				foreign.R.PeopleIdOldPeopleLogs = append(foreign.R.PeopleIdOldPeopleLogs, local)
				break
			}
		}
	}

	return nil
}

// SetPeopleIdNew of the peopleLog to the related item.
// Sets o.R.PeopleIdNew to related.
// Adds o to related.R.PeopleIdNewPeopleLogs.
func (o *PeopleLog) SetPeopleIdNew(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Person) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"peopleLog\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"peopleIdNew"}),
		strmangle.WhereClause("\"", "\"", 0, peopleLogPrimaryKeyColumns),
	)
	values := []interface{}{related.PeopleId, o.PeopleLogId}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.PeopleIdNew, related.PeopleId)
	if o.R == nil {
		o.R = &peopleLogR{
			PeopleIdNew: related,
		}
	} else {
		o.R.PeopleIdNew = related
	}

	if related.R == nil {
		related.R = &personR{
			PeopleIdNewPeopleLogs: PeopleLogSlice{o},
		}
	} else {
		related.R.PeopleIdNewPeopleLogs = append(related.R.PeopleIdNewPeopleLogs, o)
	}

	return nil
}

// RemovePeopleIdNew relationship.
// Sets o.R.PeopleIdNew to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *PeopleLog) RemovePeopleIdNew(ctx context.Context, exec boil.ContextExecutor, related *Person) error {
	var err error

	queries.SetScanner(&o.PeopleIdNew, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("peopleIdNew")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.PeopleIdNew = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.PeopleIdNewPeopleLogs {
		if queries.Equal(o.PeopleIdNew, ri.PeopleIdNew) {
			continue
		}

		ln := len(related.R.PeopleIdNewPeopleLogs)
		if ln > 1 && i < ln-1 {
			related.R.PeopleIdNewPeopleLogs[i] = related.R.PeopleIdNewPeopleLogs[ln-1]
		}
		related.R.PeopleIdNewPeopleLogs = related.R.PeopleIdNewPeopleLogs[:ln-1]
		break
	}
	return nil
}

// SetPeopleIdOld of the peopleLog to the related item.
// Sets o.R.PeopleIdOld to related.
// Adds o to related.R.PeopleIdOldPeopleLogs.
func (o *PeopleLog) SetPeopleIdOld(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Person) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"peopleLog\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"peopleIdOld"}),
		strmangle.WhereClause("\"", "\"", 0, peopleLogPrimaryKeyColumns),
	)
	values := []interface{}{related.PeopleId, o.PeopleLogId}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.PeopleIdOld, related.PeopleId)
	if o.R == nil {
		o.R = &peopleLogR{
			PeopleIdOld: related,
		}
	} else {
		o.R.PeopleIdOld = related
	}

	if related.R == nil {
		related.R = &personR{
			PeopleIdOldPeopleLogs: PeopleLogSlice{o},
		}
	} else {
		related.R.PeopleIdOldPeopleLogs = append(related.R.PeopleIdOldPeopleLogs, o)
	}

	return nil
}

// RemovePeopleIdOld relationship.
// Sets o.R.PeopleIdOld to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *PeopleLog) RemovePeopleIdOld(ctx context.Context, exec boil.ContextExecutor, related *Person) error {
	var err error

	queries.SetScanner(&o.PeopleIdOld, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("peopleIdOld")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.PeopleIdOld = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.PeopleIdOldPeopleLogs {
		if queries.Equal(o.PeopleIdOld, ri.PeopleIdOld) {
			continue
		}

		ln := len(related.R.PeopleIdOldPeopleLogs)
		if ln > 1 && i < ln-1 {
			related.R.PeopleIdOldPeopleLogs[i] = related.R.PeopleIdOldPeopleLogs[ln-1]
		}
		related.R.PeopleIdOldPeopleLogs = related.R.PeopleIdOldPeopleLogs[:ln-1]
		break
	}
	return nil
}

// PeopleLogs retrieves all the records using an executor.
func PeopleLogs(mods ...qm.QueryMod) peopleLogQuery {
	mods = append(mods, qm.From("\"peopleLog\""))
	return peopleLogQuery{NewQuery(mods...)}
}

// FindPeopleLog retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPeopleLog(ctx context.Context, exec boil.ContextExecutor, peopleLogId null.Int64, selectCols ...string) (*PeopleLog, error) {
	peopleLogObj := &PeopleLog{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"peopleLog\" where \"peopleLogId\"=?", sel,
	)

	q := queries.Raw(query, peopleLogId)

	err := q.Bind(ctx, exec, peopleLogObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from peopleLog")
	}

	return peopleLogObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PeopleLog) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no peopleLog provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(peopleLogColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	peopleLogInsertCacheMut.RLock()
	cache, cached := peopleLogInsertCache[key]
	peopleLogInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			peopleLogAllColumns,
			peopleLogColumnsWithDefault,
			peopleLogColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(peopleLogType, peopleLogMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(peopleLogType, peopleLogMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"peopleLog\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"peopleLog\" () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT \"%s\" FROM \"peopleLog\" WHERE %s", strings.Join(returnColumns, "\",\""), strmangle.WhereClause("\"", "\"", 0, peopleLogPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into peopleLog")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.PeopleLogId,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for peopleLog")
	}

CacheNoHooks:
	if !cached {
		peopleLogInsertCacheMut.Lock()
		peopleLogInsertCache[key] = cache
		peopleLogInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PeopleLog.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PeopleLog) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	peopleLogUpdateCacheMut.RLock()
	cache, cached := peopleLogUpdateCache[key]
	peopleLogUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			peopleLogAllColumns,
			peopleLogPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update peopleLog, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"peopleLog\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, peopleLogPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(peopleLogType, peopleLogMapping, append(wl, peopleLogPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update peopleLog row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for peopleLog")
	}

	if !cached {
		peopleLogUpdateCacheMut.Lock()
		peopleLogUpdateCache[key] = cache
		peopleLogUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q peopleLogQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for peopleLog")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for peopleLog")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PeopleLogSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), peopleLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"peopleLog\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, peopleLogPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in peopleLog slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all peopleLog")
	}
	return rowsAff, nil
}

// Delete deletes a single PeopleLog record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PeopleLog) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PeopleLog provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), peopleLogPrimaryKeyMapping)
	sql := "DELETE FROM \"peopleLog\" WHERE \"peopleLogId\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from peopleLog")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for peopleLog")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q peopleLogQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no peopleLogQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from peopleLog")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for peopleLog")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PeopleLogSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(peopleLogBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), peopleLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"peopleLog\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, peopleLogPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from peopleLog slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for peopleLog")
	}

	if len(peopleLogAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PeopleLog) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPeopleLog(ctx, exec, o.PeopleLogId)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PeopleLogSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PeopleLogSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), peopleLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"peopleLog\".* FROM \"peopleLog\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, peopleLogPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PeopleLogSlice")
	}

	*o = slice

	return nil
}

// PeopleLogExists checks if the PeopleLog row exists.
func PeopleLogExists(ctx context.Context, exec boil.ContextExecutor, peopleLogId null.Int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"peopleLog\" where \"peopleLogId\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, peopleLogId)
	}
	row := exec.QueryRowContext(ctx, sql, peopleLogId)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if peopleLog exists")
	}

	return exists, nil
}
