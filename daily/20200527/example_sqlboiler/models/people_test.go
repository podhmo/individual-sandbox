// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testPeople(t *testing.T) {
	t.Parallel()

	query := People()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testPeopleDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Person{}
	if err = randomize.Struct(seed, o, personDBTypes, true, personColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Person struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := People().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPeopleQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Person{}
	if err = randomize.Struct(seed, o, personDBTypes, true, personColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Person struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := People().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := People().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPeopleSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Person{}
	if err = randomize.Struct(seed, o, personDBTypes, true, personColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Person struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PersonSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := People().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPeopleExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Person{}
	if err = randomize.Struct(seed, o, personDBTypes, true, personColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Person struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := PersonExists(ctx, tx, o.PeopleId)
	if err != nil {
		t.Errorf("Unable to check if Person exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PersonExists to return true, but got false.")
	}
}

func testPeopleFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Person{}
	if err = randomize.Struct(seed, o, personDBTypes, true, personColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Person struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	personFound, err := FindPerson(ctx, tx, o.PeopleId)
	if err != nil {
		t.Error(err)
	}

	if personFound == nil {
		t.Error("want a record, got nil")
	}
}

func testPeopleBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Person{}
	if err = randomize.Struct(seed, o, personDBTypes, true, personColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Person struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = People().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testPeopleOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Person{}
	if err = randomize.Struct(seed, o, personDBTypes, true, personColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Person struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := People().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPeopleAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	personOne := &Person{}
	personTwo := &Person{}
	if err = randomize.Struct(seed, personOne, personDBTypes, false, personColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Person struct: %s", err)
	}
	if err = randomize.Struct(seed, personTwo, personDBTypes, false, personColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Person struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = personOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = personTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := People().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPeopleCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	personOne := &Person{}
	personTwo := &Person{}
	if err = randomize.Struct(seed, personOne, personDBTypes, false, personColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Person struct: %s", err)
	}
	if err = randomize.Struct(seed, personTwo, personDBTypes, false, personColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Person struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = personOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = personTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := People().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func personBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Person) error {
	*o = Person{}
	return nil
}

func personAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Person) error {
	*o = Person{}
	return nil
}

func personAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Person) error {
	*o = Person{}
	return nil
}

func personBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Person) error {
	*o = Person{}
	return nil
}

func personAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Person) error {
	*o = Person{}
	return nil
}

func personBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Person) error {
	*o = Person{}
	return nil
}

func personAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Person) error {
	*o = Person{}
	return nil
}

func personBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Person) error {
	*o = Person{}
	return nil
}

func personAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Person) error {
	*o = Person{}
	return nil
}

func testPeopleHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Person{}
	o := &Person{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, personDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Person object: %s", err)
	}

	AddPersonHook(boil.BeforeInsertHook, personBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	personBeforeInsertHooks = []PersonHook{}

	AddPersonHook(boil.AfterInsertHook, personAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	personAfterInsertHooks = []PersonHook{}

	AddPersonHook(boil.AfterSelectHook, personAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	personAfterSelectHooks = []PersonHook{}

	AddPersonHook(boil.BeforeUpdateHook, personBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	personBeforeUpdateHooks = []PersonHook{}

	AddPersonHook(boil.AfterUpdateHook, personAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	personAfterUpdateHooks = []PersonHook{}

	AddPersonHook(boil.BeforeDeleteHook, personBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	personBeforeDeleteHooks = []PersonHook{}

	AddPersonHook(boil.AfterDeleteHook, personAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	personAfterDeleteHooks = []PersonHook{}

	AddPersonHook(boil.BeforeUpsertHook, personBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	personBeforeUpsertHooks = []PersonHook{}

	AddPersonHook(boil.AfterUpsertHook, personAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	personAfterUpsertHooks = []PersonHook{}
}

func testPeopleInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Person{}
	if err = randomize.Struct(seed, o, personDBTypes, true, personColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Person struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := People().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPeopleInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Person{}
	if err = randomize.Struct(seed, o, personDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Person struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(personColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := People().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPersonToManyAuthorIdBooks(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Person
	var b, c Book

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, personDBTypes, true, personColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Person struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, bookDBTypes, false, bookColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, bookDBTypes, false, bookColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.AuthorId, a.PeopleId)
	queries.Assign(&c.AuthorId, a.PeopleId)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.AuthorIdBooks().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.AuthorId, b.AuthorId) {
			bFound = true
		}
		if queries.Equal(v.AuthorId, c.AuthorId) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PersonSlice{&a}
	if err = a.L.LoadAuthorIdBooks(ctx, tx, false, (*[]*Person)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AuthorIdBooks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.AuthorIdBooks = nil
	if err = a.L.LoadAuthorIdBooks(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AuthorIdBooks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testPersonToManyAuthorNewBooksLogs(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Person
	var b, c BooksLog

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, personDBTypes, true, personColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Person struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, booksLogDBTypes, false, booksLogColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, booksLogDBTypes, false, booksLogColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.AuthorNew, a.PeopleId)
	queries.Assign(&c.AuthorNew, a.PeopleId)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.AuthorNewBooksLogs().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.AuthorNew, b.AuthorNew) {
			bFound = true
		}
		if queries.Equal(v.AuthorNew, c.AuthorNew) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PersonSlice{&a}
	if err = a.L.LoadAuthorNewBooksLogs(ctx, tx, false, (*[]*Person)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AuthorNewBooksLogs); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.AuthorNewBooksLogs = nil
	if err = a.L.LoadAuthorNewBooksLogs(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AuthorNewBooksLogs); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testPersonToManyAuthorOldBooksLogs(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Person
	var b, c BooksLog

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, personDBTypes, true, personColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Person struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, booksLogDBTypes, false, booksLogColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, booksLogDBTypes, false, booksLogColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.AuthorOld, a.PeopleId)
	queries.Assign(&c.AuthorOld, a.PeopleId)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.AuthorOldBooksLogs().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.AuthorOld, b.AuthorOld) {
			bFound = true
		}
		if queries.Equal(v.AuthorOld, c.AuthorOld) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PersonSlice{&a}
	if err = a.L.LoadAuthorOldBooksLogs(ctx, tx, false, (*[]*Person)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AuthorOldBooksLogs); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.AuthorOldBooksLogs = nil
	if err = a.L.LoadAuthorOldBooksLogs(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AuthorOldBooksLogs); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testPersonToManyPeopleIdNewPeopleLogs(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Person
	var b, c PeopleLog

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, personDBTypes, true, personColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Person struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, peopleLogDBTypes, false, peopleLogColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, peopleLogDBTypes, false, peopleLogColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.PeopleIdNew, a.PeopleId)
	queries.Assign(&c.PeopleIdNew, a.PeopleId)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.PeopleIdNewPeopleLogs().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.PeopleIdNew, b.PeopleIdNew) {
			bFound = true
		}
		if queries.Equal(v.PeopleIdNew, c.PeopleIdNew) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PersonSlice{&a}
	if err = a.L.LoadPeopleIdNewPeopleLogs(ctx, tx, false, (*[]*Person)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PeopleIdNewPeopleLogs); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.PeopleIdNewPeopleLogs = nil
	if err = a.L.LoadPeopleIdNewPeopleLogs(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PeopleIdNewPeopleLogs); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testPersonToManyPeopleIdOldPeopleLogs(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Person
	var b, c PeopleLog

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, personDBTypes, true, personColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Person struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, peopleLogDBTypes, false, peopleLogColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, peopleLogDBTypes, false, peopleLogColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.PeopleIdOld, a.PeopleId)
	queries.Assign(&c.PeopleIdOld, a.PeopleId)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.PeopleIdOldPeopleLogs().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.PeopleIdOld, b.PeopleIdOld) {
			bFound = true
		}
		if queries.Equal(v.PeopleIdOld, c.PeopleIdOld) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PersonSlice{&a}
	if err = a.L.LoadPeopleIdOldPeopleLogs(ctx, tx, false, (*[]*Person)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PeopleIdOldPeopleLogs); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.PeopleIdOldPeopleLogs = nil
	if err = a.L.LoadPeopleIdOldPeopleLogs(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PeopleIdOldPeopleLogs); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testPersonToManyAddOpAuthorIdBooks(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Person
	var b, c, d, e Book

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, personDBTypes, false, strmangle.SetComplement(personPrimaryKeyColumns, personColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Book{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, bookDBTypes, false, strmangle.SetComplement(bookPrimaryKeyColumns, bookColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Book{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddAuthorIdBooks(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.PeopleId, first.AuthorId) {
			t.Error("foreign key was wrong value", a.PeopleId, first.AuthorId)
		}
		if !queries.Equal(a.PeopleId, second.AuthorId) {
			t.Error("foreign key was wrong value", a.PeopleId, second.AuthorId)
		}

		if first.R.AuthorId != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.AuthorId != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.AuthorIdBooks[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.AuthorIdBooks[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.AuthorIdBooks().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testPersonToManySetOpAuthorIdBooks(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Person
	var b, c, d, e Book

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, personDBTypes, false, strmangle.SetComplement(personPrimaryKeyColumns, personColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Book{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, bookDBTypes, false, strmangle.SetComplement(bookPrimaryKeyColumns, bookColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetAuthorIdBooks(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.AuthorIdBooks().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetAuthorIdBooks(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.AuthorIdBooks().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.AuthorId) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.AuthorId) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.PeopleId, d.AuthorId) {
		t.Error("foreign key was wrong value", a.PeopleId, d.AuthorId)
	}
	if !queries.Equal(a.PeopleId, e.AuthorId) {
		t.Error("foreign key was wrong value", a.PeopleId, e.AuthorId)
	}

	if b.R.AuthorId != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.AuthorId != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.AuthorId != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.AuthorId != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.AuthorIdBooks[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.AuthorIdBooks[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testPersonToManyRemoveOpAuthorIdBooks(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Person
	var b, c, d, e Book

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, personDBTypes, false, strmangle.SetComplement(personPrimaryKeyColumns, personColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Book{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, bookDBTypes, false, strmangle.SetComplement(bookPrimaryKeyColumns, bookColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddAuthorIdBooks(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.AuthorIdBooks().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveAuthorIdBooks(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.AuthorIdBooks().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.AuthorId) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.AuthorId) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.AuthorId != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.AuthorId != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.AuthorId != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.AuthorId != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.AuthorIdBooks) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.AuthorIdBooks[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.AuthorIdBooks[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testPersonToManyAddOpAuthorNewBooksLogs(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Person
	var b, c, d, e BooksLog

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, personDBTypes, false, strmangle.SetComplement(personPrimaryKeyColumns, personColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*BooksLog{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, booksLogDBTypes, false, strmangle.SetComplement(booksLogPrimaryKeyColumns, booksLogColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*BooksLog{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddAuthorNewBooksLogs(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.PeopleId, first.AuthorNew) {
			t.Error("foreign key was wrong value", a.PeopleId, first.AuthorNew)
		}
		if !queries.Equal(a.PeopleId, second.AuthorNew) {
			t.Error("foreign key was wrong value", a.PeopleId, second.AuthorNew)
		}

		if first.R.AuthorNew != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.AuthorNew != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.AuthorNewBooksLogs[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.AuthorNewBooksLogs[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.AuthorNewBooksLogs().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testPersonToManySetOpAuthorNewBooksLogs(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Person
	var b, c, d, e BooksLog

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, personDBTypes, false, strmangle.SetComplement(personPrimaryKeyColumns, personColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*BooksLog{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, booksLogDBTypes, false, strmangle.SetComplement(booksLogPrimaryKeyColumns, booksLogColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetAuthorNewBooksLogs(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.AuthorNewBooksLogs().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetAuthorNewBooksLogs(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.AuthorNewBooksLogs().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.AuthorNew) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.AuthorNew) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.PeopleId, d.AuthorNew) {
		t.Error("foreign key was wrong value", a.PeopleId, d.AuthorNew)
	}
	if !queries.Equal(a.PeopleId, e.AuthorNew) {
		t.Error("foreign key was wrong value", a.PeopleId, e.AuthorNew)
	}

	if b.R.AuthorNew != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.AuthorNew != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.AuthorNew != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.AuthorNew != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.AuthorNewBooksLogs[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.AuthorNewBooksLogs[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testPersonToManyRemoveOpAuthorNewBooksLogs(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Person
	var b, c, d, e BooksLog

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, personDBTypes, false, strmangle.SetComplement(personPrimaryKeyColumns, personColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*BooksLog{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, booksLogDBTypes, false, strmangle.SetComplement(booksLogPrimaryKeyColumns, booksLogColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddAuthorNewBooksLogs(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.AuthorNewBooksLogs().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveAuthorNewBooksLogs(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.AuthorNewBooksLogs().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.AuthorNew) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.AuthorNew) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.AuthorNew != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.AuthorNew != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.AuthorNew != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.AuthorNew != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.AuthorNewBooksLogs) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.AuthorNewBooksLogs[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.AuthorNewBooksLogs[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testPersonToManyAddOpAuthorOldBooksLogs(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Person
	var b, c, d, e BooksLog

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, personDBTypes, false, strmangle.SetComplement(personPrimaryKeyColumns, personColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*BooksLog{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, booksLogDBTypes, false, strmangle.SetComplement(booksLogPrimaryKeyColumns, booksLogColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*BooksLog{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddAuthorOldBooksLogs(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.PeopleId, first.AuthorOld) {
			t.Error("foreign key was wrong value", a.PeopleId, first.AuthorOld)
		}
		if !queries.Equal(a.PeopleId, second.AuthorOld) {
			t.Error("foreign key was wrong value", a.PeopleId, second.AuthorOld)
		}

		if first.R.AuthorOld != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.AuthorOld != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.AuthorOldBooksLogs[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.AuthorOldBooksLogs[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.AuthorOldBooksLogs().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testPersonToManySetOpAuthorOldBooksLogs(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Person
	var b, c, d, e BooksLog

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, personDBTypes, false, strmangle.SetComplement(personPrimaryKeyColumns, personColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*BooksLog{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, booksLogDBTypes, false, strmangle.SetComplement(booksLogPrimaryKeyColumns, booksLogColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetAuthorOldBooksLogs(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.AuthorOldBooksLogs().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetAuthorOldBooksLogs(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.AuthorOldBooksLogs().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.AuthorOld) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.AuthorOld) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.PeopleId, d.AuthorOld) {
		t.Error("foreign key was wrong value", a.PeopleId, d.AuthorOld)
	}
	if !queries.Equal(a.PeopleId, e.AuthorOld) {
		t.Error("foreign key was wrong value", a.PeopleId, e.AuthorOld)
	}

	if b.R.AuthorOld != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.AuthorOld != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.AuthorOld != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.AuthorOld != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.AuthorOldBooksLogs[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.AuthorOldBooksLogs[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testPersonToManyRemoveOpAuthorOldBooksLogs(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Person
	var b, c, d, e BooksLog

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, personDBTypes, false, strmangle.SetComplement(personPrimaryKeyColumns, personColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*BooksLog{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, booksLogDBTypes, false, strmangle.SetComplement(booksLogPrimaryKeyColumns, booksLogColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddAuthorOldBooksLogs(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.AuthorOldBooksLogs().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveAuthorOldBooksLogs(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.AuthorOldBooksLogs().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.AuthorOld) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.AuthorOld) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.AuthorOld != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.AuthorOld != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.AuthorOld != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.AuthorOld != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.AuthorOldBooksLogs) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.AuthorOldBooksLogs[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.AuthorOldBooksLogs[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testPersonToManyAddOpPeopleIdNewPeopleLogs(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Person
	var b, c, d, e PeopleLog

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, personDBTypes, false, strmangle.SetComplement(personPrimaryKeyColumns, personColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*PeopleLog{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, peopleLogDBTypes, false, strmangle.SetComplement(peopleLogPrimaryKeyColumns, peopleLogColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*PeopleLog{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPeopleIdNewPeopleLogs(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.PeopleId, first.PeopleIdNew) {
			t.Error("foreign key was wrong value", a.PeopleId, first.PeopleIdNew)
		}
		if !queries.Equal(a.PeopleId, second.PeopleIdNew) {
			t.Error("foreign key was wrong value", a.PeopleId, second.PeopleIdNew)
		}

		if first.R.PeopleIdNew != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.PeopleIdNew != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.PeopleIdNewPeopleLogs[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.PeopleIdNewPeopleLogs[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.PeopleIdNewPeopleLogs().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testPersonToManySetOpPeopleIdNewPeopleLogs(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Person
	var b, c, d, e PeopleLog

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, personDBTypes, false, strmangle.SetComplement(personPrimaryKeyColumns, personColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*PeopleLog{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, peopleLogDBTypes, false, strmangle.SetComplement(peopleLogPrimaryKeyColumns, peopleLogColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetPeopleIdNewPeopleLogs(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.PeopleIdNewPeopleLogs().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetPeopleIdNewPeopleLogs(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.PeopleIdNewPeopleLogs().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.PeopleIdNew) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.PeopleIdNew) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.PeopleId, d.PeopleIdNew) {
		t.Error("foreign key was wrong value", a.PeopleId, d.PeopleIdNew)
	}
	if !queries.Equal(a.PeopleId, e.PeopleIdNew) {
		t.Error("foreign key was wrong value", a.PeopleId, e.PeopleIdNew)
	}

	if b.R.PeopleIdNew != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.PeopleIdNew != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.PeopleIdNew != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.PeopleIdNew != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.PeopleIdNewPeopleLogs[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.PeopleIdNewPeopleLogs[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testPersonToManyRemoveOpPeopleIdNewPeopleLogs(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Person
	var b, c, d, e PeopleLog

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, personDBTypes, false, strmangle.SetComplement(personPrimaryKeyColumns, personColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*PeopleLog{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, peopleLogDBTypes, false, strmangle.SetComplement(peopleLogPrimaryKeyColumns, peopleLogColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddPeopleIdNewPeopleLogs(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.PeopleIdNewPeopleLogs().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemovePeopleIdNewPeopleLogs(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.PeopleIdNewPeopleLogs().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.PeopleIdNew) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.PeopleIdNew) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.PeopleIdNew != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.PeopleIdNew != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.PeopleIdNew != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.PeopleIdNew != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.PeopleIdNewPeopleLogs) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.PeopleIdNewPeopleLogs[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.PeopleIdNewPeopleLogs[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testPersonToManyAddOpPeopleIdOldPeopleLogs(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Person
	var b, c, d, e PeopleLog

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, personDBTypes, false, strmangle.SetComplement(personPrimaryKeyColumns, personColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*PeopleLog{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, peopleLogDBTypes, false, strmangle.SetComplement(peopleLogPrimaryKeyColumns, peopleLogColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*PeopleLog{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPeopleIdOldPeopleLogs(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.PeopleId, first.PeopleIdOld) {
			t.Error("foreign key was wrong value", a.PeopleId, first.PeopleIdOld)
		}
		if !queries.Equal(a.PeopleId, second.PeopleIdOld) {
			t.Error("foreign key was wrong value", a.PeopleId, second.PeopleIdOld)
		}

		if first.R.PeopleIdOld != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.PeopleIdOld != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.PeopleIdOldPeopleLogs[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.PeopleIdOldPeopleLogs[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.PeopleIdOldPeopleLogs().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testPersonToManySetOpPeopleIdOldPeopleLogs(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Person
	var b, c, d, e PeopleLog

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, personDBTypes, false, strmangle.SetComplement(personPrimaryKeyColumns, personColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*PeopleLog{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, peopleLogDBTypes, false, strmangle.SetComplement(peopleLogPrimaryKeyColumns, peopleLogColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetPeopleIdOldPeopleLogs(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.PeopleIdOldPeopleLogs().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetPeopleIdOldPeopleLogs(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.PeopleIdOldPeopleLogs().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.PeopleIdOld) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.PeopleIdOld) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.PeopleId, d.PeopleIdOld) {
		t.Error("foreign key was wrong value", a.PeopleId, d.PeopleIdOld)
	}
	if !queries.Equal(a.PeopleId, e.PeopleIdOld) {
		t.Error("foreign key was wrong value", a.PeopleId, e.PeopleIdOld)
	}

	if b.R.PeopleIdOld != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.PeopleIdOld != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.PeopleIdOld != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.PeopleIdOld != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.PeopleIdOldPeopleLogs[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.PeopleIdOldPeopleLogs[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testPersonToManyRemoveOpPeopleIdOldPeopleLogs(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Person
	var b, c, d, e PeopleLog

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, personDBTypes, false, strmangle.SetComplement(personPrimaryKeyColumns, personColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*PeopleLog{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, peopleLogDBTypes, false, strmangle.SetComplement(peopleLogPrimaryKeyColumns, peopleLogColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddPeopleIdOldPeopleLogs(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.PeopleIdOldPeopleLogs().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemovePeopleIdOldPeopleLogs(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.PeopleIdOldPeopleLogs().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.PeopleIdOld) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.PeopleIdOld) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.PeopleIdOld != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.PeopleIdOld != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.PeopleIdOld != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.PeopleIdOld != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.PeopleIdOldPeopleLogs) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.PeopleIdOldPeopleLogs[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.PeopleIdOldPeopleLogs[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testPeopleReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Person{}
	if err = randomize.Struct(seed, o, personDBTypes, true, personColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Person struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPeopleReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Person{}
	if err = randomize.Struct(seed, o, personDBTypes, true, personColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Person struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PersonSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPeopleSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Person{}
	if err = randomize.Struct(seed, o, personDBTypes, true, personColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Person struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := People().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	personDBTypes = map[string]string{`PeopleId`: `INTEGER`, `GN`: `TEXT`, `SN`: `TEXT`, `Birthday`: `DATE`}
	_             = bytes.MinRead
)

func testPeopleUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(personPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(personAllColumns) == len(personPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Person{}
	if err = randomize.Struct(seed, o, personDBTypes, true, personColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Person struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := People().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, personDBTypes, true, personPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Person struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testPeopleSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(personAllColumns) == len(personPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Person{}
	if err = randomize.Struct(seed, o, personDBTypes, true, personColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Person struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := People().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, personDBTypes, true, personPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Person struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(personAllColumns, personPrimaryKeyColumns) {
		fields = personAllColumns
	} else {
		fields = strmangle.SetComplement(
			personAllColumns,
			personPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := PersonSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}
