// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// BooksLog is an object representing the database table.
type BooksLog struct {
	BooksLogId null.Int64  `boil:"booksLogId" json:"booksLogId,omitempty" toml:"booksLogId" yaml:"booksLogId,omitempty"`
	BookIdNew  null.Int64  `boil:"bookIdNew" json:"bookIdNew,omitempty" toml:"bookIdNew" yaml:"bookIdNew,omitempty"`
	BookIdOld  null.Int64  `boil:"bookIdOld" json:"bookIdOld,omitempty" toml:"bookIdOld" yaml:"bookIdOld,omitempty"`
	TitleNew   null.String `boil:"titleNew" json:"titleNew,omitempty" toml:"titleNew" yaml:"titleNew,omitempty"`
	TitleOld   null.String `boil:"titleOld" json:"titleOld,omitempty" toml:"titleOld" yaml:"titleOld,omitempty"`
	AuthorOld  null.Int64  `boil:"authorOld" json:"authorOld,omitempty" toml:"authorOld" yaml:"authorOld,omitempty"`
	AuthorNew  null.Int64  `boil:"authorNew" json:"authorNew,omitempty" toml:"authorNew" yaml:"authorNew,omitempty"`
	Action     null.String `boil:"action" json:"action,omitempty" toml:"action" yaml:"action,omitempty"`
	Timestamp  null.Time   `boil:"timestamp" json:"timestamp,omitempty" toml:"timestamp" yaml:"timestamp,omitempty"`

	R *booksLogR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L booksLogL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BooksLogColumns = struct {
	BooksLogId string
	BookIdNew  string
	BookIdOld  string
	TitleNew   string
	TitleOld   string
	AuthorOld  string
	AuthorNew  string
	Action     string
	Timestamp  string
}{
	BooksLogId: "booksLogId",
	BookIdNew:  "bookIdNew",
	BookIdOld:  "bookIdOld",
	TitleNew:   "titleNew",
	TitleOld:   "titleOld",
	AuthorOld:  "authorOld",
	AuthorNew:  "authorNew",
	Action:     "action",
	Timestamp:  "timestamp",
}

// Generated where

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var BooksLogWhere = struct {
	BooksLogId whereHelpernull_Int64
	BookIdNew  whereHelpernull_Int64
	BookIdOld  whereHelpernull_Int64
	TitleNew   whereHelpernull_String
	TitleOld   whereHelpernull_String
	AuthorOld  whereHelpernull_Int64
	AuthorNew  whereHelpernull_Int64
	Action     whereHelpernull_String
	Timestamp  whereHelpernull_Time
}{
	BooksLogId: whereHelpernull_Int64{field: "\"booksLog\".\"booksLogId\""},
	BookIdNew:  whereHelpernull_Int64{field: "\"booksLog\".\"bookIdNew\""},
	BookIdOld:  whereHelpernull_Int64{field: "\"booksLog\".\"bookIdOld\""},
	TitleNew:   whereHelpernull_String{field: "\"booksLog\".\"titleNew\""},
	TitleOld:   whereHelpernull_String{field: "\"booksLog\".\"titleOld\""},
	AuthorOld:  whereHelpernull_Int64{field: "\"booksLog\".\"authorOld\""},
	AuthorNew:  whereHelpernull_Int64{field: "\"booksLog\".\"authorNew\""},
	Action:     whereHelpernull_String{field: "\"booksLog\".\"action\""},
	Timestamp:  whereHelpernull_Time{field: "\"booksLog\".\"timestamp\""},
}

// BooksLogRels is where relationship names are stored.
var BooksLogRels = struct {
	AuthorNew string
	AuthorOld string
	BookIdNew string
	BookIdOld string
}{
	AuthorNew: "AuthorNew",
	AuthorOld: "AuthorOld",
	BookIdNew: "BookIdNew",
	BookIdOld: "BookIdOld",
}

// booksLogR is where relationships are stored.
type booksLogR struct {
	AuthorNew *Person
	AuthorOld *Person
	BookIdNew *Book
	BookIdOld *Book
}

// NewStruct creates a new relationship struct
func (*booksLogR) NewStruct() *booksLogR {
	return &booksLogR{}
}

// booksLogL is where Load methods for each relationship are stored.
type booksLogL struct{}

var (
	booksLogAllColumns            = []string{"booksLogId", "bookIdNew", "bookIdOld", "titleNew", "titleOld", "authorOld", "authorNew", "action", "timestamp"}
	booksLogColumnsWithoutDefault = []string{}
	booksLogColumnsWithDefault    = []string{"booksLogId", "bookIdNew", "bookIdOld", "titleNew", "titleOld", "authorOld", "authorNew", "action", "timestamp"}
	booksLogPrimaryKeyColumns     = []string{"booksLogId"}
)

type (
	// BooksLogSlice is an alias for a slice of pointers to BooksLog.
	// This should generally be used opposed to []BooksLog.
	BooksLogSlice []*BooksLog
	// BooksLogHook is the signature for custom BooksLog hook methods
	BooksLogHook func(context.Context, boil.ContextExecutor, *BooksLog) error

	booksLogQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	booksLogType                 = reflect.TypeOf(&BooksLog{})
	booksLogMapping              = queries.MakeStructMapping(booksLogType)
	booksLogPrimaryKeyMapping, _ = queries.BindMapping(booksLogType, booksLogMapping, booksLogPrimaryKeyColumns)
	booksLogInsertCacheMut       sync.RWMutex
	booksLogInsertCache          = make(map[string]insertCache)
	booksLogUpdateCacheMut       sync.RWMutex
	booksLogUpdateCache          = make(map[string]updateCache)
	booksLogUpsertCacheMut       sync.RWMutex
	booksLogUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var booksLogBeforeInsertHooks []BooksLogHook
var booksLogBeforeUpdateHooks []BooksLogHook
var booksLogBeforeDeleteHooks []BooksLogHook
var booksLogBeforeUpsertHooks []BooksLogHook

var booksLogAfterInsertHooks []BooksLogHook
var booksLogAfterSelectHooks []BooksLogHook
var booksLogAfterUpdateHooks []BooksLogHook
var booksLogAfterDeleteHooks []BooksLogHook
var booksLogAfterUpsertHooks []BooksLogHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BooksLog) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range booksLogBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BooksLog) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range booksLogBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BooksLog) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range booksLogBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BooksLog) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range booksLogBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BooksLog) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range booksLogAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BooksLog) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range booksLogAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BooksLog) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range booksLogAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BooksLog) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range booksLogAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BooksLog) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range booksLogAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBooksLogHook registers your hook function for all future operations.
func AddBooksLogHook(hookPoint boil.HookPoint, booksLogHook BooksLogHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		booksLogBeforeInsertHooks = append(booksLogBeforeInsertHooks, booksLogHook)
	case boil.BeforeUpdateHook:
		booksLogBeforeUpdateHooks = append(booksLogBeforeUpdateHooks, booksLogHook)
	case boil.BeforeDeleteHook:
		booksLogBeforeDeleteHooks = append(booksLogBeforeDeleteHooks, booksLogHook)
	case boil.BeforeUpsertHook:
		booksLogBeforeUpsertHooks = append(booksLogBeforeUpsertHooks, booksLogHook)
	case boil.AfterInsertHook:
		booksLogAfterInsertHooks = append(booksLogAfterInsertHooks, booksLogHook)
	case boil.AfterSelectHook:
		booksLogAfterSelectHooks = append(booksLogAfterSelectHooks, booksLogHook)
	case boil.AfterUpdateHook:
		booksLogAfterUpdateHooks = append(booksLogAfterUpdateHooks, booksLogHook)
	case boil.AfterDeleteHook:
		booksLogAfterDeleteHooks = append(booksLogAfterDeleteHooks, booksLogHook)
	case boil.AfterUpsertHook:
		booksLogAfterUpsertHooks = append(booksLogAfterUpsertHooks, booksLogHook)
	}
}

// One returns a single booksLog record from the query.
func (q booksLogQuery) One(ctx context.Context, exec boil.ContextExecutor) (*BooksLog, error) {
	o := &BooksLog{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for booksLog")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BooksLog records from the query.
func (q booksLogQuery) All(ctx context.Context, exec boil.ContextExecutor) (BooksLogSlice, error) {
	var o []*BooksLog

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to BooksLog slice")
	}

	if len(booksLogAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BooksLog records in the query.
func (q booksLogQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count booksLog rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q booksLogQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if booksLog exists")
	}

	return count > 0, nil
}

// AuthorNew pointed to by the foreign key.
func (o *BooksLog) AuthorNew(mods ...qm.QueryMod) personQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"peopleId\" = ?", o.AuthorNew),
	}

	queryMods = append(queryMods, mods...)

	query := People(queryMods...)
	queries.SetFrom(query.Query, "\"people\"")

	return query
}

// AuthorOld pointed to by the foreign key.
func (o *BooksLog) AuthorOld(mods ...qm.QueryMod) personQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"peopleId\" = ?", o.AuthorOld),
	}

	queryMods = append(queryMods, mods...)

	query := People(queryMods...)
	queries.SetFrom(query.Query, "\"people\"")

	return query
}

// BookIdNew pointed to by the foreign key.
func (o *BooksLog) BookIdNew(mods ...qm.QueryMod) bookQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"bookId\" = ?", o.BookIdNew),
	}

	queryMods = append(queryMods, mods...)

	query := Books(queryMods...)
	queries.SetFrom(query.Query, "\"books\"")

	return query
}

// BookIdOld pointed to by the foreign key.
func (o *BooksLog) BookIdOld(mods ...qm.QueryMod) bookQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"bookId\" = ?", o.BookIdOld),
	}

	queryMods = append(queryMods, mods...)

	query := Books(queryMods...)
	queries.SetFrom(query.Query, "\"books\"")

	return query
}

// LoadAuthorNew allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (booksLogL) LoadAuthorNew(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBooksLog interface{}, mods queries.Applicator) error {
	var slice []*BooksLog
	var object *BooksLog

	if singular {
		object = maybeBooksLog.(*BooksLog)
	} else {
		slice = *maybeBooksLog.(*[]*BooksLog)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &booksLogR{}
		}
		if !queries.IsNil(object.AuthorNew) {
			args = append(args, object.AuthorNew)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &booksLogR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.AuthorNew) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.AuthorNew) {
				args = append(args, obj.AuthorNew)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`people`), qm.WhereIn(`people.peopleId in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Person")
	}

	var resultSlice []*Person
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Person")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for people")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for people")
	}

	if len(booksLogAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.AuthorNew = foreign
		if foreign.R == nil {
			foreign.R = &personR{}
		}
		foreign.R.AuthorNewBooksLogs = append(foreign.R.AuthorNewBooksLogs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.AuthorNew, foreign.PeopleId) {
				local.R.AuthorNew = foreign
				if foreign.R == nil {
					foreign.R = &personR{}
				}
				foreign.R.AuthorNewBooksLogs = append(foreign.R.AuthorNewBooksLogs, local)
				break
			}
		}
	}

	return nil
}

// LoadAuthorOld allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (booksLogL) LoadAuthorOld(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBooksLog interface{}, mods queries.Applicator) error {
	var slice []*BooksLog
	var object *BooksLog

	if singular {
		object = maybeBooksLog.(*BooksLog)
	} else {
		slice = *maybeBooksLog.(*[]*BooksLog)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &booksLogR{}
		}
		if !queries.IsNil(object.AuthorOld) {
			args = append(args, object.AuthorOld)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &booksLogR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.AuthorOld) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.AuthorOld) {
				args = append(args, obj.AuthorOld)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`people`), qm.WhereIn(`people.peopleId in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Person")
	}

	var resultSlice []*Person
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Person")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for people")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for people")
	}

	if len(booksLogAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.AuthorOld = foreign
		if foreign.R == nil {
			foreign.R = &personR{}
		}
		foreign.R.AuthorOldBooksLogs = append(foreign.R.AuthorOldBooksLogs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.AuthorOld, foreign.PeopleId) {
				local.R.AuthorOld = foreign
				if foreign.R == nil {
					foreign.R = &personR{}
				}
				foreign.R.AuthorOldBooksLogs = append(foreign.R.AuthorOldBooksLogs, local)
				break
			}
		}
	}

	return nil
}

// LoadBookIdNew allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (booksLogL) LoadBookIdNew(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBooksLog interface{}, mods queries.Applicator) error {
	var slice []*BooksLog
	var object *BooksLog

	if singular {
		object = maybeBooksLog.(*BooksLog)
	} else {
		slice = *maybeBooksLog.(*[]*BooksLog)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &booksLogR{}
		}
		if !queries.IsNil(object.BookIdNew) {
			args = append(args, object.BookIdNew)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &booksLogR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BookIdNew) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.BookIdNew) {
				args = append(args, obj.BookIdNew)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`books`), qm.WhereIn(`books.bookId in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Book")
	}

	var resultSlice []*Book
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Book")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for books")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for books")
	}

	if len(booksLogAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BookIdNew = foreign
		if foreign.R == nil {
			foreign.R = &bookR{}
		}
		foreign.R.BookIdNewBooksLogs = append(foreign.R.BookIdNewBooksLogs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.BookIdNew, foreign.BookId) {
				local.R.BookIdNew = foreign
				if foreign.R == nil {
					foreign.R = &bookR{}
				}
				foreign.R.BookIdNewBooksLogs = append(foreign.R.BookIdNewBooksLogs, local)
				break
			}
		}
	}

	return nil
}

// LoadBookIdOld allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (booksLogL) LoadBookIdOld(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBooksLog interface{}, mods queries.Applicator) error {
	var slice []*BooksLog
	var object *BooksLog

	if singular {
		object = maybeBooksLog.(*BooksLog)
	} else {
		slice = *maybeBooksLog.(*[]*BooksLog)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &booksLogR{}
		}
		if !queries.IsNil(object.BookIdOld) {
			args = append(args, object.BookIdOld)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &booksLogR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BookIdOld) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.BookIdOld) {
				args = append(args, obj.BookIdOld)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`books`), qm.WhereIn(`books.bookId in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Book")
	}

	var resultSlice []*Book
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Book")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for books")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for books")
	}

	if len(booksLogAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BookIdOld = foreign
		if foreign.R == nil {
			foreign.R = &bookR{}
		}
		foreign.R.BookIdOldBooksLogs = append(foreign.R.BookIdOldBooksLogs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.BookIdOld, foreign.BookId) {
				local.R.BookIdOld = foreign
				if foreign.R == nil {
					foreign.R = &bookR{}
				}
				foreign.R.BookIdOldBooksLogs = append(foreign.R.BookIdOldBooksLogs, local)
				break
			}
		}
	}

	return nil
}

// SetAuthorNew of the booksLog to the related item.
// Sets o.R.AuthorNew to related.
// Adds o to related.R.AuthorNewBooksLogs.
func (o *BooksLog) SetAuthorNew(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Person) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"booksLog\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"authorNew"}),
		strmangle.WhereClause("\"", "\"", 0, booksLogPrimaryKeyColumns),
	)
	values := []interface{}{related.PeopleId, o.BooksLogId}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.AuthorNew, related.PeopleId)
	if o.R == nil {
		o.R = &booksLogR{
			AuthorNew: related,
		}
	} else {
		o.R.AuthorNew = related
	}

	if related.R == nil {
		related.R = &personR{
			AuthorNewBooksLogs: BooksLogSlice{o},
		}
	} else {
		related.R.AuthorNewBooksLogs = append(related.R.AuthorNewBooksLogs, o)
	}

	return nil
}

// RemoveAuthorNew relationship.
// Sets o.R.AuthorNew to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *BooksLog) RemoveAuthorNew(ctx context.Context, exec boil.ContextExecutor, related *Person) error {
	var err error

	queries.SetScanner(&o.AuthorNew, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("authorNew")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.AuthorNew = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.AuthorNewBooksLogs {
		if queries.Equal(o.AuthorNew, ri.AuthorNew) {
			continue
		}

		ln := len(related.R.AuthorNewBooksLogs)
		if ln > 1 && i < ln-1 {
			related.R.AuthorNewBooksLogs[i] = related.R.AuthorNewBooksLogs[ln-1]
		}
		related.R.AuthorNewBooksLogs = related.R.AuthorNewBooksLogs[:ln-1]
		break
	}
	return nil
}

// SetAuthorOld of the booksLog to the related item.
// Sets o.R.AuthorOld to related.
// Adds o to related.R.AuthorOldBooksLogs.
func (o *BooksLog) SetAuthorOld(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Person) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"booksLog\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"authorOld"}),
		strmangle.WhereClause("\"", "\"", 0, booksLogPrimaryKeyColumns),
	)
	values := []interface{}{related.PeopleId, o.BooksLogId}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.AuthorOld, related.PeopleId)
	if o.R == nil {
		o.R = &booksLogR{
			AuthorOld: related,
		}
	} else {
		o.R.AuthorOld = related
	}

	if related.R == nil {
		related.R = &personR{
			AuthorOldBooksLogs: BooksLogSlice{o},
		}
	} else {
		related.R.AuthorOldBooksLogs = append(related.R.AuthorOldBooksLogs, o)
	}

	return nil
}

// RemoveAuthorOld relationship.
// Sets o.R.AuthorOld to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *BooksLog) RemoveAuthorOld(ctx context.Context, exec boil.ContextExecutor, related *Person) error {
	var err error

	queries.SetScanner(&o.AuthorOld, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("authorOld")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.AuthorOld = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.AuthorOldBooksLogs {
		if queries.Equal(o.AuthorOld, ri.AuthorOld) {
			continue
		}

		ln := len(related.R.AuthorOldBooksLogs)
		if ln > 1 && i < ln-1 {
			related.R.AuthorOldBooksLogs[i] = related.R.AuthorOldBooksLogs[ln-1]
		}
		related.R.AuthorOldBooksLogs = related.R.AuthorOldBooksLogs[:ln-1]
		break
	}
	return nil
}

// SetBookIdNew of the booksLog to the related item.
// Sets o.R.BookIdNew to related.
// Adds o to related.R.BookIdNewBooksLogs.
func (o *BooksLog) SetBookIdNew(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Book) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"booksLog\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"bookIdNew"}),
		strmangle.WhereClause("\"", "\"", 0, booksLogPrimaryKeyColumns),
	)
	values := []interface{}{related.BookId, o.BooksLogId}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.BookIdNew, related.BookId)
	if o.R == nil {
		o.R = &booksLogR{
			BookIdNew: related,
		}
	} else {
		o.R.BookIdNew = related
	}

	if related.R == nil {
		related.R = &bookR{
			BookIdNewBooksLogs: BooksLogSlice{o},
		}
	} else {
		related.R.BookIdNewBooksLogs = append(related.R.BookIdNewBooksLogs, o)
	}

	return nil
}

// RemoveBookIdNew relationship.
// Sets o.R.BookIdNew to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *BooksLog) RemoveBookIdNew(ctx context.Context, exec boil.ContextExecutor, related *Book) error {
	var err error

	queries.SetScanner(&o.BookIdNew, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("bookIdNew")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.BookIdNew = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.BookIdNewBooksLogs {
		if queries.Equal(o.BookIdNew, ri.BookIdNew) {
			continue
		}

		ln := len(related.R.BookIdNewBooksLogs)
		if ln > 1 && i < ln-1 {
			related.R.BookIdNewBooksLogs[i] = related.R.BookIdNewBooksLogs[ln-1]
		}
		related.R.BookIdNewBooksLogs = related.R.BookIdNewBooksLogs[:ln-1]
		break
	}
	return nil
}

// SetBookIdOld of the booksLog to the related item.
// Sets o.R.BookIdOld to related.
// Adds o to related.R.BookIdOldBooksLogs.
func (o *BooksLog) SetBookIdOld(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Book) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"booksLog\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"bookIdOld"}),
		strmangle.WhereClause("\"", "\"", 0, booksLogPrimaryKeyColumns),
	)
	values := []interface{}{related.BookId, o.BooksLogId}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.BookIdOld, related.BookId)
	if o.R == nil {
		o.R = &booksLogR{
			BookIdOld: related,
		}
	} else {
		o.R.BookIdOld = related
	}

	if related.R == nil {
		related.R = &bookR{
			BookIdOldBooksLogs: BooksLogSlice{o},
		}
	} else {
		related.R.BookIdOldBooksLogs = append(related.R.BookIdOldBooksLogs, o)
	}

	return nil
}

// RemoveBookIdOld relationship.
// Sets o.R.BookIdOld to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *BooksLog) RemoveBookIdOld(ctx context.Context, exec boil.ContextExecutor, related *Book) error {
	var err error

	queries.SetScanner(&o.BookIdOld, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("bookIdOld")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.BookIdOld = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.BookIdOldBooksLogs {
		if queries.Equal(o.BookIdOld, ri.BookIdOld) {
			continue
		}

		ln := len(related.R.BookIdOldBooksLogs)
		if ln > 1 && i < ln-1 {
			related.R.BookIdOldBooksLogs[i] = related.R.BookIdOldBooksLogs[ln-1]
		}
		related.R.BookIdOldBooksLogs = related.R.BookIdOldBooksLogs[:ln-1]
		break
	}
	return nil
}

// BooksLogs retrieves all the records using an executor.
func BooksLogs(mods ...qm.QueryMod) booksLogQuery {
	mods = append(mods, qm.From("\"booksLog\""))
	return booksLogQuery{NewQuery(mods...)}
}

// FindBooksLog retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBooksLog(ctx context.Context, exec boil.ContextExecutor, booksLogId null.Int64, selectCols ...string) (*BooksLog, error) {
	booksLogObj := &BooksLog{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"booksLog\" where \"booksLogId\"=?", sel,
	)

	q := queries.Raw(query, booksLogId)

	err := q.Bind(ctx, exec, booksLogObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from booksLog")
	}

	return booksLogObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BooksLog) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no booksLog provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(booksLogColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	booksLogInsertCacheMut.RLock()
	cache, cached := booksLogInsertCache[key]
	booksLogInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			booksLogAllColumns,
			booksLogColumnsWithDefault,
			booksLogColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(booksLogType, booksLogMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(booksLogType, booksLogMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"booksLog\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"booksLog\" () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT \"%s\" FROM \"booksLog\" WHERE %s", strings.Join(returnColumns, "\",\""), strmangle.WhereClause("\"", "\"", 0, booksLogPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into booksLog")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.BooksLogId,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for booksLog")
	}

CacheNoHooks:
	if !cached {
		booksLogInsertCacheMut.Lock()
		booksLogInsertCache[key] = cache
		booksLogInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the BooksLog.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BooksLog) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	booksLogUpdateCacheMut.RLock()
	cache, cached := booksLogUpdateCache[key]
	booksLogUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			booksLogAllColumns,
			booksLogPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update booksLog, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"booksLog\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, booksLogPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(booksLogType, booksLogMapping, append(wl, booksLogPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update booksLog row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for booksLog")
	}

	if !cached {
		booksLogUpdateCacheMut.Lock()
		booksLogUpdateCache[key] = cache
		booksLogUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q booksLogQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for booksLog")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for booksLog")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BooksLogSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), booksLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"booksLog\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, booksLogPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in booksLog slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all booksLog")
	}
	return rowsAff, nil
}

// Delete deletes a single BooksLog record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BooksLog) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no BooksLog provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), booksLogPrimaryKeyMapping)
	sql := "DELETE FROM \"booksLog\" WHERE \"booksLogId\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from booksLog")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for booksLog")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q booksLogQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no booksLogQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from booksLog")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for booksLog")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BooksLogSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(booksLogBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), booksLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"booksLog\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, booksLogPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from booksLog slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for booksLog")
	}

	if len(booksLogAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BooksLog) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBooksLog(ctx, exec, o.BooksLogId)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BooksLogSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BooksLogSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), booksLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"booksLog\".* FROM \"booksLog\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, booksLogPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in BooksLogSlice")
	}

	*o = slice

	return nil
}

// BooksLogExists checks if the BooksLog row exists.
func BooksLogExists(ctx context.Context, exec boil.ContextExecutor, booksLogId null.Int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"booksLog\" where \"booksLogId\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, booksLogId)
	}
	row := exec.QueryRowContext(ctx, sql, booksLogId)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if booksLog exists")
	}

	return exists, nil
}
