from prestring import go
from dictknife import loading


def emit(data, m):
    for name, schema in (data.get("definitions") or {}).items():
        if "enum" in schema:
            emit_enum(name, schema, m)


def emit_enum(name, schema, m):
    typename = go.goname(name)
    m.stmt('// {} : {}'.format(typename, schema.get("description", "").split("\n", 1)[0]))
    m.stmt("type {} string".format(typename))
    m.sep()
    with m.const_group() as cm:
        for e in schema["enum"]:
            itemname = '{}{}{}'.format(
                typename, go.goname(e), "Reversed" if e.startswith("-") else ""
            )
            cm('// {} :'.format(itemname))
            cm('{} = "{}"'.format(itemname, e))


def main():
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument("src", nargs="?", default=None)
    parser.add_argument("--package", default="autogenerated")
    args = parser.parse_args()

    loading.setup()
    data = loading.loadfile(args.src)
    m = go.Module()
    m.package(args.package)
    emit(data, m)
    print(m)


if __name__ == "__main__":
    main()
