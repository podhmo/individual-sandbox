fastapi.applications:FastAPI <- starlette.applications:Starlette <- builtins:object
    [method, OVERRIDE] __call__(self, scope: MutableMapping[str, Any], receive: Callable[[], Awaitable[MutableMapping[str, Any]]], send: Callable[[MutableMapping[str, Any]], Awaitable[NoneType]]) -> None
    [method, OVERRIDE] __init__(self, debug: bool = False, routes: List[starlette.routing.BaseRoute] = None, template_directory: str = None, title: str = 'Fast API', description: str = '', version: str = '0.1.0', openapi_url: Union[str, NoneType] = '/openapi.json', openapi_prefix: str = '', default_response_class: Type[starlette.responses.Response] = <class 'starlette.responses.JSONResponse'>, docs_url: Union[str, NoneType] = '/docs', redoc_url: Union[str, NoneType] = '/redoc', swagger_ui_oauth2_redirect_url: Union[str, NoneType] = '/docs/oauth2-redirect', swagger_ui_init_oauth: Union[dict, NoneType] = None, **extra: Dict[str, Any]) -> None
        [method] setup(self) -> None
            [method] openapi(self) -> Dict
    [method] add_api_route(self, path: str, endpoint: Callable, *, response_model: Type[Any] = None, status_code: int = 200, tags: List[str] = None, dependencies: Sequence[fastapi.params.Depends] = None, summary: str = None, description: str = None, response_description: str = 'Successful Response', responses: Dict[Union[int, str], Dict[str, Any]] = None, deprecated: bool = None, methods: List[str] = None, operation_id: str = None, response_model_include: Union[Set[Union[int, str]], Dict[Union[int, str], Any]] = None, response_model_exclude: Union[Set[Union[int, str]], Dict[Union[int, str], Any]] = set(), response_model_by_alias: bool = True, response_model_skip_defaults: bool = False, include_in_schema: bool = True, response_class: Type[starlette.responses.Response] = None, name: str = None) -> None
    [method] api_route(self, path: str, *, response_model: Type[Any] = None, status_code: int = 200, tags: List[str] = None, dependencies: Sequence[fastapi.params.Depends] = None, summary: str = None, description: str = None, response_description: str = 'Successful Response', responses: Dict[Union[int, str], Dict[str, Any]] = None, deprecated: bool = None, methods: List[str] = None, operation_id: str = None, response_model_include: Union[Set[Union[int, str]], Dict[Union[int, str], Any]] = None, response_model_exclude: Union[Set[Union[int, str]], Dict[Union[int, str], Any]] = set(), response_model_by_alias: bool = True, response_model_skip_defaults: bool = False, include_in_schema: bool = True, response_class: Type[starlette.responses.Response] = None, name: str = None) -> Callable
    [method] delete(self, path: str, *, response_model: Type[Any] = None, status_code: int = 200, tags: List[str] = None, dependencies: Sequence[fastapi.params.Depends] = None, summary: str = None, description: str = None, response_description: str = 'Successful Response', responses: Dict[Union[int, str], Dict[str, Any]] = None, deprecated: bool = None, operation_id: str = None, response_model_include: Union[Set[Union[int, str]], Dict[Union[int, str], Any]] = None, response_model_exclude: Union[Set[Union[int, str]], Dict[Union[int, str], Any]] = set(), response_model_by_alias: bool = True, response_model_skip_defaults: bool = False, include_in_schema: bool = True, response_class: Type[starlette.responses.Response] = None, name: str = None) -> Callable
    [method] get(self, path: str, *, response_model: Type[Any] = None, status_code: int = 200, tags: List[str] = None, dependencies: Sequence[fastapi.params.Depends] = None, summary: str = None, description: str = None, response_description: str = 'Successful Response', responses: Dict[Union[int, str], Dict[str, Any]] = None, deprecated: bool = None, operation_id: str = None, response_model_include: Union[Set[Union[int, str]], Dict[Union[int, str], Any]] = None, response_model_exclude: Union[Set[Union[int, str]], Dict[Union[int, str], Any]] = set(), response_model_by_alias: bool = True, response_model_skip_defaults: bool = False, include_in_schema: bool = True, response_class: Type[starlette.responses.Response] = None, name: str = None) -> Callable
    [method] head(self, path: str, *, response_model: Type[Any] = None, status_code: int = 200, tags: List[str] = None, dependencies: Sequence[fastapi.params.Depends] = None, summary: str = None, description: str = None, response_description: str = 'Successful Response', responses: Dict[Union[int, str], Dict[str, Any]] = None, deprecated: bool = None, operation_id: str = None, response_model_include: Union[Set[Union[int, str]], Dict[Union[int, str], Any]] = None, response_model_exclude: Union[Set[Union[int, str]], Dict[Union[int, str], Any]] = set(), response_model_by_alias: bool = True, response_model_skip_defaults: bool = False, include_in_schema: bool = True, response_class: Type[starlette.responses.Response] = None, name: str = None) -> Callable
    [method] include_router(self, router: fastapi.routing.APIRouter, *, prefix: str = '', tags: List[str] = None, dependencies: Sequence[fastapi.params.Depends] = None, responses: Dict[Union[int, str], Dict[str, Any]] = None, default_response_class: Union[Type[starlette.responses.Response], NoneType] = None) -> None
    [method] options(self, path: str, *, response_model: Type[Any] = None, status_code: int = 200, tags: List[str] = None, dependencies: Sequence[fastapi.params.Depends] = None, summary: str = None, description: str = None, response_description: str = 'Successful Response', responses: Dict[Union[int, str], Dict[str, Any]] = None, deprecated: bool = None, operation_id: str = None, response_model_include: Union[Set[Union[int, str]], Dict[Union[int, str], Any]] = None, response_model_exclude: Union[Set[Union[int, str]], Dict[Union[int, str], Any]] = set(), response_model_by_alias: bool = True, response_model_skip_defaults: bool = False, include_in_schema: bool = True, response_class: Type[starlette.responses.Response] = None, name: str = None) -> Callable
    [method] patch(self, path: str, *, response_model: Type[Any] = None, status_code: int = 200, tags: List[str] = None, dependencies: Sequence[fastapi.params.Depends] = None, summary: str = None, description: str = None, response_description: str = 'Successful Response', responses: Dict[Union[int, str], Dict[str, Any]] = None, deprecated: bool = None, operation_id: str = None, response_model_include: Union[Set[Union[int, str]], Dict[Union[int, str], Any]] = None, response_model_exclude: Union[Set[Union[int, str]], Dict[Union[int, str], Any]] = set(), response_model_by_alias: bool = True, response_model_skip_defaults: bool = False, include_in_schema: bool = True, response_class: Type[starlette.responses.Response] = None, name: str = None) -> Callable
    [method] post(self, path: str, *, response_model: Type[Any] = None, status_code: int = 200, tags: List[str] = None, dependencies: Sequence[fastapi.params.Depends] = None, summary: str = None, description: str = None, response_description: str = 'Successful Response', responses: Dict[Union[int, str], Dict[str, Any]] = None, deprecated: bool = None, operation_id: str = None, response_model_include: Union[Set[Union[int, str]], Dict[Union[int, str], Any]] = None, response_model_exclude: Union[Set[Union[int, str]], Dict[Union[int, str], Any]] = set(), response_model_by_alias: bool = True, response_model_skip_defaults: bool = False, include_in_schema: bool = True, response_class: Type[starlette.responses.Response] = None, name: str = None) -> Callable
    [method] put(self, path: str, *, response_model: Type[Any] = None, status_code: int = 200, tags: List[str] = None, dependencies: Sequence[fastapi.params.Depends] = None, summary: str = None, description: str = None, response_description: str = 'Successful Response', responses: Dict[Union[int, str], Dict[str, Any]] = None, deprecated: bool = None, operation_id: str = None, response_model_include: Union[Set[Union[int, str]], Dict[Union[int, str], Any]] = None, response_model_exclude: Union[Set[Union[int, str]], Dict[Union[int, str], Any]] = set(), response_model_by_alias: bool = True, response_model_skip_defaults: bool = False, include_in_schema: bool = True, response_class: Type[starlette.responses.Response] = None, name: str = None) -> Callable
    [method] trace(self, path: str, *, response_model: Type[Any] = None, status_code: int = 200, tags: List[str] = None, dependencies: Sequence[fastapi.params.Depends] = None, summary: str = None, description: str = None, response_description: str = 'Successful Response', responses: Dict[Union[int, str], Dict[str, Any]] = None, deprecated: bool = None, operation_id: str = None, response_model_include: Union[Set[Union[int, str]], Dict[Union[int, str], Any]] = None, response_model_exclude: Union[Set[Union[int, str]], Dict[Union[int, str], Any]] = set(), response_model_by_alias: bool = True, response_model_skip_defaults: bool = False, include_in_schema: bool = True, response_class: Type[starlette.responses.Response] = None, name: str = None) -> Callable
    [method] websocket(self, path: str, name: str = None) -> Callable
        [method] add_api_websocket_route(self, path: str, endpoint: Callable, name: str = None) -> None

starlette.applications:Starlette <- builtins:object
    [method, OVERRIDE] __call__(self, scope: MutableMapping[str, Any], receive: Callable[[], Awaitable[MutableMapping[str, Any]]], send: Callable[[MutableMapping[str, Any]], Awaitable[NoneType]]) -> None
    [method, OVERRIDE] __init__(self, debug: bool = False, routes: List[starlette.routing.BaseRoute] = None) -> None
    [method] add_event_handler(self, event_type: str, func: Callable) -> None
    [method] add_route(self, path: str, route: Callable, methods: List[str] = None, name: str = None, include_in_schema: bool = True) -> None
    [method] add_websocket_route(self, path: str, route: Callable, name: str = None) -> None
    [property] debug
    [method] exception_handler(self, exc_class_or_status_code: Union[int, Type[Exception]]) -> Callable
        [method] add_exception_handler(self, exc_class_or_status_code: Union[int, Type[Exception]], handler: Callable) -> None
    [method] host(self, host: str, app: Callable[[MutableMapping[str, Any], Callable[[], Awaitable[MutableMapping[str, Any]]], Callable[[MutableMapping[str, Any]], Awaitable[NoneType]]], Awaitable[NoneType]], name: str = None) -> None
    [method] middleware(self, middleware_type: str) -> Callable
        [method] add_middleware(self, middleware_class: type, **kwargs: Any) -> None
    [method] mount(self, path: str, app: Callable[[MutableMapping[str, Any], Callable[[], Awaitable[MutableMapping[str, Any]]], Callable[[MutableMapping[str, Any]], Awaitable[NoneType]]], Awaitable[NoneType]], name: str = None) -> None
    [method] on_event(self, event_type: str) -> Callable
    [method] route(self, path: str, methods: List[str] = None, name: str = None, include_in_schema: bool = True) -> Callable
    [property] routes
    [method] url_path_for(self, name: str, **path_params: str) -> starlette.datastructures.URLPath
    [method] websocket_route(self, path: str, name: str = None) -> Callable

