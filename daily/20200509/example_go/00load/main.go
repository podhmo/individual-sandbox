package main

import (
	"bytes"
	"encoding/json"
	"log"

	"github.com/k0kubun/pp"
	"github.com/podhmo/maperr"
)

// this file is generated by egoist.generators.structkit

type Person struct {
	Name     string    `json:"name"`
	Age      int       `json:"age"`
	Parents  []*Person `json:"parents"`
	Children []Person  `json:"children"`
}

func (p *Person) UnmarshalJSON(b []byte) error {
	var err *maperr.Error

	// loading internal data
	var inner struct {
		Name     *string          `json:"name"`     // required
		Age      *int             `json:"age"`      // required
		Parents  *json.RawMessage `json:"parents"`  // required
		Children *json.RawMessage `json:"children"` // required
	}
	if rawErr := json.Unmarshal(b, &inner); rawErr != nil {
		return err.AddSummary(rawErr.Error())
	}

	// binding field value and required check
	{
		if inner.Name != nil {
			p.Name = *inner.Name
		} else {
			err = err.Add("name", maperr.Message{Text: "required"})
		}
		if inner.Age != nil {
			p.Age = *inner.Age
		} else {
			err = err.Add("age", maperr.Message{Text: "required"})
		}
		if inner.Parents != nil {
			p.Parents = []*Person{}
			if rawerr := json.Unmarshal(*inner.Parents, &p.Parents); rawerr != nil {
				err = err.Add("parents", maperr.Message{Error: rawerr})
			}
		} else {
			err = err.Add("parents", maperr.Message{Text: "required"})
		}
		if inner.Children != nil {
			p.Children = []Person{}
			if rawerr := json.Unmarshal(*inner.Children, &p.Children); rawerr != nil {
				err = err.Add("children", maperr.Message{Error: rawerr})
			}
		} else {
			err = err.Add("children", maperr.Message{Text: "required"})
		}
	}

	return err.Untyped()
}

func main() {
	b := bytes.NewBufferString(`{"name": "foo","age": 20, "children":[{"name": "foo","age": 20, "children":[], "parents":[]}], "parents":[]}`)
	decoder := json.NewDecoder(b)
	var p Person
	if err := decoder.Decode(&p); err != nil {
		log.Fatalf("!! %+v", err)
	}
	pp.Println(p)
}
